{"version":3,"sources":["webpack://Onfido/../node_modules/babel-runtime/core-js/get-iterator.js","webpack://Onfido/../node_modules/babel-runtime/helpers/extends.js","webpack://Onfido/../node_modules/babel-runtime/core-js/object/get-prototype-of.js","webpack://Onfido/../node_modules/babel-runtime/helpers/objectWithoutProperties.js","webpack://Onfido/../node_modules/babel-runtime/helpers/slicedToArray.js","webpack://Onfido/../node_modules/babel-runtime/core-js/is-iterable.js","webpack://Onfido/../node_modules/babel-runtime/core-js/object/keys.js","webpack://Onfido/../node_modules/babel-runtime/core-js/object/assign.js","webpack://Onfido/../node_modules/react-responsive-ui/commonjs/Select.js","webpack://Onfido/../node_modules/amator/index.js","webpack://Onfido/../node_modules/bezier-easing/src/index.js","webpack://Onfido/../node_modules/react-responsive-ui/commonjs/utility/dom.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/common.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/metadata.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/format.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/get number type.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/parse.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/as you type.js","webpack://Onfido/../node_modules/libphonenumber-js/index.es6.js","webpack://Onfido/../node_modules/libphonenumber-js/es6/validate.js","webpack://Onfido/../node_modules/input-format/es6/helpers.js","webpack://Onfido/../node_modules/input-format/es6/template formatter.js","webpack://Onfido/../node_modules/input-format/es6/close braces.js","webpack://Onfido/../node_modules/input-format/es6/parse.js","webpack://Onfido/../node_modules/input-format/es6/dom.js","webpack://Onfido/../node_modules/input-format/es6/input controller.js","webpack://Onfido/../node_modules/input-format/es6/edit.js","webpack://Onfido/../node_modules/input-format/es6/format.js","webpack://Onfido/../node_modules/input-format/es6/react input.js","webpack://Onfido/../node_modules/input-format/es6/parse digit.js","webpack://Onfido/../node_modules/react-phone-number-input/modules/Input.js","webpack://Onfido/../node_modules/react-phone-number-input/modules/InternationalIcon.js","webpack://Onfido/../node_modules/react-phone-number-input/modules/InputWithDefaultMetadata.js","webpack://Onfido/../node_modules/react-phone-number-input/index.js","webpack://Onfido/../node_modules/scroll-into-view-if-needed/dist/calculate.js","webpack://Onfido/../node_modules/scroll-into-view-if-needed/dist/index.js"],"names":["module","exports","default","__webpack_require__","__esModule","obj","_assign","_assign2","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","keys","indexOf","_isIterable3","_interopRequireDefault","_getIterator3","arr","Array","isArray","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","err","sliceIterator","TypeError","defineProperty","_extends","assign","_createClass","defineProperties","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_react","_react2","_propTypes2","_reactDom2","_classnames2","_scrollIntoViewIfNeeded2","_dom","value_prop_type","oneOfType","string","number","bool","Select","_PureComponent","instance","_classCallCheck","this","_this","self","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","_initialiseProps","options","_this$props","autocomplete","children","menu","toggler","onChange","Error","state","matching_options","get_matching_options","Children","forEach","element","label","subClass","superClass","create","constructor","setPrototypeOf","_inherits","PureComponent","_props","fallback","nativeExpanded","document","addEventListener","document_clicked","setState","javascript","resize_native_expanded_select","window","previous_props","previous_state","_props2","_state","expanded","height","should_animate","calculate_height","removeEventListener","clearTimeout","toggle_timeout","scroll_into_view_timeout","restore_focus_on_collapse_timeout","_this2","_props3","id","upward","concise","compact","scroll","alignment","saveOnIcons","native","disabled","required","placeholder","error","closeButton","closeAriaLabel","style","className","_state2","list_height","get_options","list_style","is_scrollable","maxHeight","overflow","overflown","list_items","map","_ref","index","icon","render_list_item","wrapper_style","textAlign","show_options_list","get_selected_option","show_label","createElement","ref","_ref3","select","onKeyDown","on_key_down_in_container","onBlur","on_blur","rrui__rich","rrui__select--menu","rrui__select--upward","rrui__select--expanded","rrui__select--collapsed","rrui__select--disabled","rrui__select--compact","rrui__input","render_selected_item","htmlFor","rrui__input-label--required","value_is_empty","rrui__input-label--invalid","should_indicate_invalid","render_toggler","_ref2","list","rrui__select__options--autocomplete","rrui__select__options--menu","rrui__expandable--expanded","rrui__select__options--expanded","rrui__expandable--left-aligned","rrui__expandable--right-aligned","rrui__select__options--left-aligned","rrui__select__options--right-aligned","rrui__select__options--upward","rrui__select__options--downward","type","onClick","toggle","aria-label","rrui__select__close--autocomplete","render_static","_ref4","_this3","_props4","scrollbarPadding","_state3","focused_option_value","is_focused","item_style","marginRight","getScrollbarWidth","button","extra_props","rrui__select__option--focused","event","item_clicked","cloneElement","render_icon","tabIndex","rrui__select__option--disabled","get_option_key","_ref5","rrui__select__separator-option","Separator","rrui__expandable__content--expanded","rrui__select__options-list-item--expanded","label_is_shown","_props5","selected","render_selected_item_only","native_expanded_select_container_style","_this4","_props6","onFocus","title","ariaLabel","inputClassName","toggleClassName","_state4","autocomplete_input_value","autocomplete_width","selected_label","get_selected_option_label","selected_text","selected_style_classes","rrui__input-element","_ref6","on_autocomplete_input_change","on_key_down","rrui__input-field--disabled","show_selected_as_an_icon","_ref7","rrui__select__button--empty","rrui__select__button--invalid","rrui__input-element--invalid","rrui__select__button--disabled","rrui__select__selected-label--required","rrui__select__arrow--expanded","rrui__select__arrow--disabled","_this5","_ref8","_this6","_props7","name","rrui__rich__fallback","_ref9","native_select_on_change","rrui__select__native-expanded","render_native_select_options","child","empty_option_is_selected","empty_option_present","rendered_options","option","unshift","_props8","indicateInvalid","get_option","_props9","filter","x","_props10","option_index","_props11","maxItems","vertical_padding","_focus","_props12","autocompleteShowAll","slice","option_element","findDOMNode","offset_top","offsetTop","firstChild","scrollTop","gravity","is_first_option","is_last_option","lastChild","top_line","bottom_line","offsetHeight","list_dom_node","scrollHeight","parseInt","getComputedStyle","paddingTop","scrollable_list_height","_props13","toLowerCase","_ref10","verbose","propTypes","arrayOf","shape","node","func","isRequired","object","oneOf","focusUponSelection","scrollIntoView","expandAnimationDuration","onTabOut","onToggle","defaultProps","viewBox","stroke","strokeWidth","fill","fillRule","strokeLinecap","transform","d","_this7","_props14","previous_value","width","offsetWidth","toggle_options","preventDefault","_props15","setTimeout","is_now_expanded","dont_focus_after_toggle","navigator","userAgent","scrollIntoViewIfNeeded","duration","scroll_to","callback","_props16","selected_option","options_list","contains","ctrlKey","altKey","shiftKey","metaKey","keyCode","submitFormOnCtrlEnter","_props17","_state5","previous","previous_focusable_option","show_option","next_focusable_option","submitContainingForm","_props18","relatedTarget","currentTarget","_event","stopPropagation","input","display","component","focus","BezierEasing","animations","ease","easeIn","easeOut","easeInOut","linear","noop","start","diff","easing","console","warn","step","scheduler","canRaf","requestAnimationFrame","bind","cancel","cancelAnimationFrame","cb","getScheduler","previousAnimationId","durationInMs","durationInFrames","Math","max","frame","loop","t","setValues","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","mX1","mY1","mX2","mY2","sampleValues","getTForX","aX","intervalStart","currentSample","lastSample","guessForT","initialSlope","aGuessT","currentSlope","newtonRaphsonIterate","aA","aB","currentX","currentT","abs","binarySubdivide","_reactDom","parentElement","HTMLFormElement","submit","querySelector","click","matches_entirely","text","regular_expression","matched_groups","match","get_phone_code","country_metadata","get_national_number_pattern","get_formats","get_leading_digits","get_format_pattern","format_array","metadata_get_format_format","get_format_leading_digits_patterns","get_format_national_prefix_formatting_rule","get_national_prefix_formatting_rule","get_format_national_prefix_is_optional_when_formatting","get_national_prefix_is_optional_when_formatting","get_format_uses_national_prefix","national_prefix_formatting_rule","test","replace","get_format_international_format","get_metadata_by_country_phone_code","country_phone_code","metadata","country_code","country_phone_code_to_countries","countries","get_types","get_type","get_type_mobile","format_format","first_argument","second_argument","third_argument","fourth_argument","_sort_out_arguments","format_type","phone","country","sort_out_arguments","_parse_phone_number_a","parse_phone_number_and_country_phone_code","national_number","format_national_number","FIRST_GROUP_PATTERN","format_national_number_using_format","format","international","enforce_national_prefix","format_pattern_matcher","RegExp","national_prefix_may_be_omitted","formatted_number","local_to_international_style","format_as","available_formats","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","get_iterator_default","_format","last_leading_digits_pattern","search","return","choose_format_for_number","local","VALID_PUNCTUATION","trim","get_number_type","get_number_type_sort_out_arguments","is_of_type","get_type_premium_rate","get_type_toll_free","get_type_shared_cost","get_type_voip","get_type_personal_number","get_type_pager","get_type_uan","get_type_voice_mail","get_type_fixed_line","String","is_viable_phone_number","parse_parse","VALID_PHONE_NUMBER_PATTERN","MIN_LENGTH_FOR_NSN","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","LEADING_PLUS_CHARS_PATTERN","DIGIT_MAPPINGS","0","1","2","3","4","5","6","7","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","MAX_LENGTH_COUNTRY_CODE","MAX_LENGTH_FOR_NSN","MAX_INPUT_STRING_LENGTH","default_options","restrict_to_country","extends_default","restrict","parse_sort_out_arguments","formatted_phone_number","extract_formatted_phone_number","normalize","strip_national_prefix","find_country_code","replacements","replaced","character","replacement","toUpperCase","replace_characters","starts_at","parse_phone_number","is_international","national_prefix_for_parsing","get_national_prefix","get_national_prefix_for_parsing","national_prefix_pattern","national_prefix_matcher","exec","national_significant_number","any_groups_were_captured","national_prefix_transform_rule","get_national_prefix_transform_rule","national_number_rule","national_phone_number","possible_countries","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","DUMMY_DIGIT_MATCHER","LONGEST_DUMMY_PHONE_NUMBER","repeat","DIGIT_PLACEHOLDER_MATCHER","DIGIT_PLACEHOLDER_MATCHER_GLOBAL","CHARACTER_CLASS_PATTERN","STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","es6_as_you_type","as_you_type","classCallCheck_default","default_country","reset","createClass_default","extracted_number","process_input","current_output","parsed_input","reset_countriness","determine_the_country","extract_country_phone_code","initialize_phone_number_formats_for_this_country_phone_code","reset_format","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","should_format","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","template","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","reset_country","partially_populated_template","last_match_position","leading_digits","index_of_leading_digits_pattern","leading_digits_pattern_count","leading_digits_pattern_index","min","leading_digits_pattern","validate_format","create_formatting_template","full_number","formatted_national_number","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","digit","cut_before","retained_template","opening_braces","count_occurences","closing_braces","dangling_braces","close_dangling_braces","symbol","count","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","times","result","index_es6_parse","parameters","metadata_min","apply","index_es6_format","is_valid_number","index_es6_as_you_type","asYouType","getPhoneCode","getPhoneCodeCustom","helpers_count_occurences","template_formatter","should_close_braces","characters_in_template","value_character_index","filled_in_template","empty_placeholder","close_braces","es6_parse_parse","caret_position","parse_character","focused_input_character_index","caret","getSelection","selectionStart","selectionEnd","end","Keys","Backspace","Delete","setCaretPosition","setSelectionRange","input_controller_Input_controller","Input_controller","get_input_element","parse","on_change","input_controller_initialiseProps","selection","format_input_text","onCut","onPaste","erase_selection","operation","getOperation","_parse","edit_result","edit","format_result","formatter","found","possibly_last_input_character_index","es6_format_format","input_controller","react_input_ReactInput","_React$Component","ReactInput","possibleConstructorReturn_default","get_prototype_of_default","store_instance","preact_compat_es","getParsedValue","inherits_default","inputComponent","rest","objectWithoutProperties_default","is_empty","Component","prop_types_default","a","react_input","all_countries","default_dictionary","International","Input_iteratorNormalCompletion","Input_didIteratorError","Input_iteratorError","Input_step","Input_iterator","modules_countries","item","_item","slicedToArray_default","code","Input_name","Input_Input","_Component","Input","Input_initialiseProps","dictionary","internationalIcon","flags","normalize_country_code","should_add_international_option","value_property","get_input_value_depending_on_the_country_selected","select_options","using_custom_country_names","get_country_option_icon","localeCompare","sort","b","convertToNational","parsed","input_value","onCountryChange","new_props","new_country","set_country","showCountrySelect","autoComplete","selectTabIndex","selectMaxItems","selectAriaLabel","selectCloseAriaLabel","inputTabIndex","selectStyle","inputStyle","SelectComponent","selectComponent","InputComponent","input_props","flagComponent","flagsPath","country_select_is_shown","classnames_default","react-phone-number-input--invalid","can_change_country","store_select_instance","country_select_toggled","on_country_select_tab_out","react-phone-number-input__country--native-expanded","store_input_instance","rrui__input-field--invalid","objectOf","countryCode","alt","src","version","xmlns","xmlnsXlink","points","Select_default","previous_country_code","set_country_code_value","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","keys_default","strip_country_phone_code","parse_partial_number","phone_number","phone_number_digits","possible_country_phone_code","substring","could_phone_number_belong_to_country","input_text","is_selectable_country","changed_country","partial_national_number","e164","is_shown","modules_Input","properties","modules_InputWithDefaultMetadata","InputWithDefaultMetadata","__webpack_exports__","__assign","s","n","p","handleScroll","parent","_a","scrollLeft","dist_assign","dist_handleScroll","config","amator_default","animateOptions","finalElement","offsetOptions","HTMLElement","centerIfNeeded","isBoolean","defaultOffset","top","right","bottom","left","offset","boundary","offsetRight","offsetBottom","offsetLeft","withinBounds","extent","area","makeArea","translate","y","relativeFromTo","lhs","rhs","newLeft","newTop","offsetParent","clientLeft","clientTop","parentNode","clientWidth","clientHeight","calculate"],"mappings":"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","file":"onfido.vendors~crossDevice.min.js","sourcesContent":["module.exports = { \"default\": require(\"core-js/library/fn/get-iterator\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nvar _assign = require(\"../core-js/object/assign\");\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _assign2.default || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};","module.exports = { \"default\": require(\"core-js/library/fn/object/get-prototype-of\"), __esModule: true };","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};","\"use strict\";\n\nexports.__esModule = true;\n\nvar _isIterable2 = require(\"../core-js/is-iterable\");\n\nvar _isIterable3 = _interopRequireDefault(_isIterable2);\n\nvar _getIterator2 = require(\"../core-js/get-iterator\");\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if ((0, _isIterable3.default)(Object(arr))) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();","module.exports = { \"default\": require(\"core-js/library/fn/is-iterable\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };","module.exports = { \"default\": require(\"core-js/library/fn/object/assign\"), __esModule: true };","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _scrollIntoViewIfNeeded = require('scroll-into-view-if-needed');\n\nvar _scrollIntoViewIfNeeded2 = _interopRequireDefault(_scrollIntoViewIfNeeded);\n\nvar _dom = require('./utility/dom');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// Possible enhancements:\n//\n//  * If the menu is close to a screen edge,\n//    automatically reposition it so that it fits on the screen\n//  * Maybe show menu immediately above the toggler\n//    (like in Material design), not below it.\n//\n// https://material.google.com/components/menus.html\n\nvar Empty_value_option_value = '';\n\nvar value_prop_type = _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool]);\n\nvar Select = function (_PureComponent) {\n\t_inherits(Select, _PureComponent);\n\n\tfunction Select(props) {\n\t\t_classCallCheck(this, Select);\n\n\t\t// Shouldn't memory leak because\n\t\t// the set of options is assumed to be constant.\n\t\tvar _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n\t\t_initialiseProps.call(_this);\n\n\t\t_this.options = {};\n\n\t\tvar _this$props = _this.props,\n\t\t    value = _this$props.value,\n\t\t    autocomplete = _this$props.autocomplete,\n\t\t    options = _this$props.options,\n\t\t    children = _this$props.children,\n\t\t    menu = _this$props.menu,\n\t\t    toggler = _this$props.toggler,\n\t\t    onChange = _this$props.onChange;\n\n\n\t\tif (autocomplete) {\n\t\t\tif (!options) {\n\t\t\t\tthrow new Error('\"options\" property is required for an \"autocomplete\" select');\n\t\t\t}\n\n\t\t\t_this.state.matching_options = _this.get_matching_options(options, undefined);\n\t\t}\n\n\t\tif (children && !menu) {\n\t\t\t_react2.default.Children.forEach(children, function (element) {\n\t\t\t\tif (!element.props.value) {\n\t\t\t\t\tthrow new Error('You must specify \"value\" prop on each child of <Select/>');\n\t\t\t\t}\n\n\t\t\t\tif (!element.props.label) {\n\t\t\t\t\tthrow new Error('You must specify \"label\" prop on each child of <Select/>');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (menu && !toggler) {\n\t\t\tthrow new Error('Supply a \"toggler\" component when enabling \"menu\" in <Select/>');\n\t\t}\n\n\t\tif (!menu && !onChange) {\n\t\t\tthrow new Error('\"onChange\" property must be specified for a non-menu <Select/>');\n\t\t}\n\t\treturn _this;\n\t}\n\n\t// Client side rendering, javascript is enabled\n\n\n\t_createClass(Select, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tvar _props = this.props,\n\t\t\t    fallback = _props.fallback,\n\t\t\t    nativeExpanded = _props.nativeExpanded;\n\n\n\t\t\tdocument.addEventListener('click', this.document_clicked);\n\n\t\t\tif (fallback) {\n\t\t\t\tthis.setState({ javascript: true });\n\t\t\t}\n\n\t\t\tif (nativeExpanded) {\n\t\t\t\tthis.resize_native_expanded_select();\n\t\t\t\twindow.addEventListener('resize', this.resize_native_expanded_select);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate(previous_props, previous_state) {\n\t\t\tvar _props2 = this.props,\n\t\t\t    nativeExpanded = _props2.nativeExpanded,\n\t\t\t    value = _props2.value;\n\t\t\tvar _state = this.state,\n\t\t\t    expanded = _state.expanded,\n\t\t\t    height = _state.height;\n\n\n\t\t\tif (expanded !== previous_state.expanded) {\n\t\t\t\tif (expanded && this.should_animate()) {\n\t\t\t\t\tif (height === undefined) {\n\t\t\t\t\t\tthis.calculate_height();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the `value` changed then resize the native expanded `<select/>`\n\t\t\tif (nativeExpanded && value !== previous_props.value) {\n\t\t\t\tthis.resize_native_expanded_select();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tvar nativeExpanded = this.props.nativeExpanded;\n\n\n\t\t\tdocument.removeEventListener('click', this.document_clicked);\n\n\t\t\tif (nativeExpanded) {\n\t\t\t\twindow.removeEventListener('resize', this.resize_native_expanded_select);\n\t\t\t}\n\n\t\t\tclearTimeout(this.toggle_timeout);\n\t\t\tclearTimeout(this.scroll_into_view_timeout);\n\t\t\tclearTimeout(this.restore_focus_on_collapse_timeout);\n\n\t\t\tthis.toggle_timeout = undefined;\n\t\t\tthis.scroll_into_view_timeout = undefined;\n\t\t\tthis.restore_focus_on_collapse_timeout = undefined;\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _this2 = this;\n\n\t\t\tvar _props3 = this.props,\n\t\t\t    id = _props3.id,\n\t\t\t    upward = _props3.upward,\n\t\t\t    concise = _props3.concise,\n\t\t\t    compact = _props3.compact,\n\t\t\t    scroll = _props3.scroll,\n\t\t\t    children = _props3.children,\n\t\t\t    menu = _props3.menu,\n\t\t\t    toggler = _props3.toggler,\n\t\t\t    alignment = _props3.alignment,\n\t\t\t    autocomplete = _props3.autocomplete,\n\t\t\t    saveOnIcons = _props3.saveOnIcons,\n\t\t\t    fallback = _props3.fallback,\n\t\t\t    native = _props3.native,\n\t\t\t    nativeExpanded = _props3.nativeExpanded,\n\t\t\t    disabled = _props3.disabled,\n\t\t\t    required = _props3.required,\n\t\t\t    placeholder = _props3.placeholder,\n\t\t\t    label = _props3.label,\n\t\t\t    value = _props3.value,\n\t\t\t    error = _props3.error,\n\t\t\t    closeButton = _props3.closeButton,\n\t\t\t    closeAriaLabel = _props3.closeAriaLabel,\n\t\t\t    style = _props3.style,\n\t\t\t    className = _props3.className;\n\t\t\tvar _state2 = this.state,\n\t\t\t    expanded = _state2.expanded,\n\t\t\t    list_height = _state2.list_height;\n\n\n\t\t\tvar options = this.get_options();\n\n\t\t\tvar list_style = void 0;\n\n\t\t\t// Makes the options list scrollable (only when not in `autocomplete` mode).\n\t\t\tif (this.is_scrollable() && list_height !== undefined) {\n\t\t\t\tlist_style = { maxHeight: list_height + 'px' };\n\t\t\t}\n\n\t\t\tvar overflow = scroll && options && this.overflown();\n\n\t\t\tvar list_items = void 0;\n\n\t\t\t// If a list of options is supplied as an array of `{ value, label }`,\n\t\t\t// then transform those elements to <buttons/>\n\t\t\tif (options) {\n\t\t\t\tlist_items = options.map(function (_ref, index) {\n\t\t\t\t\tvar value = _ref.value,\n\t\t\t\t\t    label = _ref.label,\n\t\t\t\t\t    icon = _ref.icon;\n\n\t\t\t\t\treturn _this2.render_list_item({ index: index, value: value, label: label, icon: !saveOnIcons && icon, overflow: overflow });\n\t\t\t\t});\n\t\t\t}\n\t\t\t// Else, if a list of options is supplied as a set of child React elements,\n\t\t\t// then render those elements.\n\t\t\telse {\n\t\t\t\t\tlist_items = _react2.default.Children.map(children, function (element, index) {\n\t\t\t\t\t\tif (!element) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn _this2.render_list_item({ index: index, element: element });\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\tvar wrapper_style = { textAlign: alignment };\n\n\t\t\tvar selected = this.get_selected_option();\n\n\t\t\tvar show_options_list = !native && !nativeExpanded && list_items.length > 0;\n\t\t\tvar show_label = label && (this.get_selected_option() || placeholder);\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\tref: function ref(_ref3) {\n\t\t\t\t\t\treturn _this2.select = _ref3;\n\t\t\t\t\t},\n\t\t\t\t\tonKeyDown: this.on_key_down_in_container,\n\t\t\t\t\tonBlur: this.on_blur,\n\t\t\t\t\tstyle: style ? _extends({}, wrapper_style, style) : wrapper_style,\n\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__select', {\n\t\t\t\t\t\t'rrui__rich': fallback,\n\t\t\t\t\t\t'rrui__select--menu': menu,\n\t\t\t\t\t\t'rrui__select--upward': upward,\n\t\t\t\t\t\t'rrui__select--expanded': expanded,\n\t\t\t\t\t\t'rrui__select--collapsed': !expanded,\n\t\t\t\t\t\t'rrui__select--disabled': disabled,\n\t\t\t\t\t\t'rrui__select--compact': compact || concise && !autocomplete\n\t\t\t\t\t}, className) },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: (0, _classnames2.default)({\n\t\t\t\t\t\t\t'rrui__input': !toggler\n\t\t\t\t\t\t}) },\n\t\t\t\t\t!menu && !native && this.render_selected_item(show_label),\n\t\t\t\t\tshow_label && _react2.default.createElement(\n\t\t\t\t\t\t'label',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\thtmlFor: id,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__input-label', {\n\t\t\t\t\t\t\t\t'rrui__input-label--required': required && value_is_empty(value),\n\t\t\t\t\t\t\t\t'rrui__input-label--invalid': this.should_indicate_invalid()\n\t\t\t\t\t\t\t}) },\n\t\t\t\t\t\tlabel\n\t\t\t\t\t),\n\t\t\t\t\tmenu && this.render_toggler(),\n\t\t\t\t\tshow_options_list && _react2.default.createElement(\n\t\t\t\t\t\t'ul',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tref: function ref(_ref2) {\n\t\t\t\t\t\t\t\treturn _this2.list = _ref2;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tstyle: list_style,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__expandable', 'rrui__expandable--overlay', 'rrui__select__options', 'rrui__shadow', {\n\t\t\t\t\t\t\t\t'rrui__select__options--autocomplete': autocomplete,\n\t\t\t\t\t\t\t\t'rrui__select__options--menu': menu,\n\t\t\t\t\t\t\t\t'rrui__expandable--expanded': expanded,\n\t\t\t\t\t\t\t\t'rrui__select__options--expanded': expanded,\n\t\t\t\t\t\t\t\t'rrui__expandable--left-aligned': alignment === 'left',\n\t\t\t\t\t\t\t\t'rrui__expandable--right-aligned': alignment === 'right',\n\t\t\t\t\t\t\t\t'rrui__select__options--left-aligned': !children && alignment === 'left',\n\t\t\t\t\t\t\t\t'rrui__select__options--right-aligned': !children && alignment === 'right',\n\t\t\t\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t\t\t\t'rrui__select__options--upward': upward,\n\t\t\t\t\t\t\t\t'rrui__select__options--downward': !upward\n\t\t\t\t\t\t\t}) },\n\t\t\t\t\t\tlist_items\n\t\t\t\t\t),\n\t\t\t\t\tshow_options_list && expanded && closeButton && _react2.default.createElement(\n\t\t\t\t\t\t'button',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tonClick: this.toggle,\n\t\t\t\t\t\t\t'aria-label': closeAriaLabel,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__button-reset', 'rrui__select__close', {\n\t\t\t\t\t\t\t\t'rrui__select__close--autocomplete': autocomplete\n\t\t\t\t\t\t\t}) },\n\t\t\t\t\t\tcloseButton\n\t\t\t\t\t),\n\t\t\t\t\t(native || fallback && !this.state.javascript) && this.render_static()\n\t\t\t\t),\n\t\t\t\tthis.should_indicate_invalid() && _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'rrui__input-error' },\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}, {\n\t\tkey: 'render_list_item',\n\t\tvalue: function render_list_item(_ref4) // , first, last\n\t\t{\n\t\t\tvar _this3 = this;\n\n\t\t\tvar index = _ref4.index,\n\t\t\t    element = _ref4.element,\n\t\t\t    value = _ref4.value,\n\t\t\t    label = _ref4.label,\n\t\t\t    icon = _ref4.icon,\n\t\t\t    overflow = _ref4.overflow;\n\t\t\tvar _props4 = this.props,\n\t\t\t    disabled = _props4.disabled,\n\t\t\t    menu = _props4.menu,\n\t\t\t    scrollbarPadding = _props4.scrollbarPadding;\n\t\t\tvar _state3 = this.state,\n\t\t\t    focused_option_value = _state3.focused_option_value,\n\t\t\t    expanded = _state3.expanded;\n\n\t\t\t// If a list of options is supplied as a set of child React elements,\n\t\t\t// then extract values from their props.\n\n\t\t\tif (element) {\n\t\t\t\tvalue = element.props.value;\n\t\t\t}\n\n\t\t\tvar is_focused = !menu && value === focused_option_value;\n\n\t\t\tvar item_style = void 0;\n\n\t\t\t// on overflow the vertical scrollbar will take up space\n\t\t\t// reducing padding-right and the only way to fix that\n\t\t\t// is to add additional padding-right\n\t\t\t//\n\t\t\t// a hack to restore padding-right taken up by a vertical scrollbar\n\t\t\tif (overflow && scrollbarPadding) {\n\t\t\t\titem_style = { marginRight: (0, _dom.getScrollbarWidth)() + 'px' };\n\t\t\t}\n\n\t\t\tvar button = void 0;\n\n\t\t\t// If a list of options is supplied as a set of child React elements,\n\t\t\t// then enhance those elements with extra props.\n\t\t\tif (element) {\n\t\t\t\tvar extra_props = {\n\t\t\t\t\tstyle: item_style ? _extends({}, item_style, element.props.style) : element.props.style,\n\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__button-reset', 'rrui__select__option', {\n\t\t\t\t\t\t'rrui__select__option--focused': is_focused\n\t\t\t\t\t}, element.props.className)\n\t\t\t\t};\n\n\t\t\t\tvar onClick = element.props.onClick;\n\n\t\t\t\textra_props.onClick = function (event) {\n\t\t\t\t\tif (menu) {\n\t\t\t\t\t\t_this3.toggle();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_this3.item_clicked(value, event);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (onClick) {\n\t\t\t\t\t\tonClick(event);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tbutton = _react2.default.cloneElement(element, extra_props);\n\t\t\t}\n\t\t\t// Else, if a list of options is supplied as an array of `{ value, label }`,\n\t\t\t// then transform those options to <buttons/>\n\t\t\telse {\n\t\t\t\t\tif (icon) {\n\t\t\t\t\t\ticon = render_icon(icon);\n\t\t\t\t\t}\n\n\t\t\t\t\tbutton = _react2.default.createElement(\n\t\t\t\t\t\t'button',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'button',\n\t\t\t\t\t\t\tonClick: function onClick(event) {\n\t\t\t\t\t\t\t\treturn _this3.item_clicked(value, event);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\t\ttabIndex: '-1',\n\t\t\t\t\t\t\t'aria-label': label,\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__button-reset', 'rrui__select__option', {\n\t\t\t\t\t\t\t\t'rrui__select__option--focused': is_focused,\n\t\t\t\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t\t\t\t'rrui__select__option--disabled': disabled\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\tstyle: item_style },\n\t\t\t\t\t\ticon && _react2.default.cloneElement(icon, {\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)(icon.props.className, 'rrui__select__option-icon')\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tlabel\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'li',\n\t\t\t\t{\n\t\t\t\t\tkey: get_option_key(value),\n\t\t\t\t\tref: function ref(_ref5) {\n\t\t\t\t\t\treturn _this3.options[get_option_key(value)] = _ref5;\n\t\t\t\t\t},\n\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__expandable__content', 'rrui__select__options-list-item', {\n\t\t\t\t\t\t'rrui__select__separator-option': element && element.type === Select.Separator,\n\t\t\t\t\t\t'rrui__expandable__content--expanded': expanded,\n\t\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t\t'rrui__select__options-list-item--expanded': expanded\n\t\t\t\t\t}) },\n\t\t\t\tbutton\n\t\t\t);\n\t\t}\n\n\t\t// Renders the selected option\n\t\t// and possibly a transparent native `<select/>` above it\n\t\t// so that the native `<select/>` expands upon click\n\t\t// on the selected option\n\t\t// (in case of `nativeExpanded` setting).\n\n\t}, {\n\t\tkey: 'render_selected_item',\n\t\tvalue: function render_selected_item(label_is_shown) {\n\t\t\tvar _props5 = this.props,\n\t\t\t    nativeExpanded = _props5.nativeExpanded,\n\t\t\t    toggler = _props5.toggler;\n\n\n\t\t\tif (toggler) {\n\t\t\t\treturn this.render_toggler();\n\t\t\t}\n\n\t\t\tvar selected = this.render_selected_item_only(label_is_shown);\n\n\t\t\tif (nativeExpanded) {\n\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ style: native_expanded_select_container_style },\n\t\t\t\t\tthis.render_static(),\n\t\t\t\t\tselected\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn selected;\n\t\t}\n\t}, {\n\t\tkey: 'render_selected_item_only',\n\t\tvalue: function render_selected_item_only(label_is_shown) {\n\t\t\tvar _this4 = this;\n\n\t\t\tvar _props6 = this.props,\n\t\t\t    children = _props6.children,\n\t\t\t    value = _props6.value,\n\t\t\t    placeholder = _props6.placeholder,\n\t\t\t    label = _props6.label,\n\t\t\t    disabled = _props6.disabled,\n\t\t\t    required = _props6.required,\n\t\t\t    autocomplete = _props6.autocomplete,\n\t\t\t    concise = _props6.concise,\n\t\t\t    nativeExpanded = _props6.nativeExpanded,\n\t\t\t    tabIndex = _props6.tabIndex,\n\t\t\t    onFocus = _props6.onFocus,\n\t\t\t    title = _props6.title,\n\t\t\t    ariaLabel = _props6.ariaLabel,\n\t\t\t    inputClassName = _props6.inputClassName,\n\t\t\t    toggleClassName = _props6.toggleClassName;\n\t\t\tvar _state4 = this.state,\n\t\t\t    expanded = _state4.expanded,\n\t\t\t    autocomplete_width = _state4.autocomplete_width,\n\t\t\t    autocomplete_input_value = _state4.autocomplete_input_value;\n\n\n\t\t\tvar selected = this.get_selected_option();\n\t\t\tvar selected_label = this.get_selected_option_label();\n\n\t\t\tvar selected_text = selected ? selected_label : placeholder || label;\n\n\t\t\tvar selected_style_classes = {\n\t\t\t\t'rrui__input-element': true\n\t\t\t};\n\n\t\t\tif (autocomplete && expanded) {\n\t\t\t\t// style = { ...style, width: autocomplete_width + 'px' }\n\n\t\t\t\treturn _react2.default.createElement('input', {\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tref: function ref(_ref6) {\n\t\t\t\t\t\treturn _this4.autocomplete = _ref6;\n\t\t\t\t\t},\n\t\t\t\t\tplaceholder: selected_text,\n\t\t\t\t\tvalue: autocomplete_input_value,\n\t\t\t\t\tonChange: this.on_autocomplete_input_change,\n\t\t\t\t\tonKeyDown: this.on_key_down,\n\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\ttabIndex: tabIndex,\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tclassName: (0, _classnames2.default)(selected_style_classes, 'rrui__input-field', 'rrui__select__autocomplete', inputClassName,\n\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t// (should it even be optimized).\n\t\t\t\t\t{\n\t\t\t\t\t\t'rrui__input-field--disabled': disabled\n\t\t\t\t\t}) });\n\t\t\t}\n\n\t\t\tvar show_selected_as_an_icon = concise && selected && selected.icon;\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'button',\n\t\t\t\t{\n\t\t\t\t\tref: function ref(_ref7) {\n\t\t\t\t\t\treturn _this4.selected = _ref7;\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'button',\n\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\tonClick: this.toggle,\n\t\t\t\t\tonKeyDown: this.on_key_down,\n\t\t\t\t\tonFocus: onFocus,\n\t\t\t\t\ttabIndex: nativeExpanded ? -1 : tabIndex,\n\t\t\t\t\ttitle: title,\n\t\t\t\t\t'aria-label': ariaLabel,\n\t\t\t\t\tclassName: (0, _classnames2.default)(selected_style_classes, 'rrui__button-reset', 'rrui__select__button', toggleClassName, {\n\t\t\t\t\t\t'rrui__select__button--empty': !selected_label,\n\t\t\t\t\t\t'rrui__select__button--invalid': this.should_indicate_invalid(),\n\t\t\t\t\t\t'rrui__input-element--invalid': this.should_indicate_invalid(),\n\t\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t\t// (should it even be optimized).\n\t\t\t\t\t\t'rrui__select__button--disabled': disabled\n\t\t\t\t\t}) },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'rrui__select__selected-content' },\n\t\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__select__selected-label', {\n\t\t\t\t\t\t\t\t'rrui__select__selected-label--required': !label_is_shown && required && value_is_empty(value)\n\t\t\t\t\t\t\t}) },\n\t\t\t\t\t\tshow_selected_as_an_icon ? _react2.default.cloneElement(render_icon(selected.icon), { title: selected_label }) : selected_text\n\t\t\t\t\t),\n\t\t\t\t\t_react2.default.createElement('div', {\n\t\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__select__arrow', {\n\t\t\t\t\t\t\t// CSS selector performance optimization\n\t\t\t\t\t\t\t'rrui__select__arrow--expanded': expanded,\n\t\t\t\t\t\t\t'rrui__select__arrow--disabled': disabled\n\t\t\t\t\t\t}) })\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}, {\n\t\tkey: 'render_toggler',\n\t\tvalue: function render_toggler() {\n\t\t\tvar _this5 = this;\n\n\t\t\tvar toggler = this.props.toggler;\n\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'div',\n\t\t\t\t{ className: 'rrui__select__toggler' },\n\t\t\t\t_react2.default.cloneElement(toggler, {\n\t\t\t\t\tref: function ref(_ref8) {\n\t\t\t\t\t\treturn _this5.selected = _ref8;\n\t\t\t\t\t},\n\t\t\t\t\tonClick: this.toggle,\n\t\t\t\t\tonKeyDown: this.on_key_down\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\n\t\t// supports disabled javascript\n\n\t}, {\n\t\tkey: 'render_static',\n\t\tvalue: function render_static() {\n\t\t\tvar _this6 = this;\n\n\t\t\tvar _props7 = this.props,\n\t\t\t    id = _props7.id,\n\t\t\t    name = _props7.name,\n\t\t\t    value = _props7.value,\n\t\t\t    label = _props7.label,\n\t\t\t    disabled = _props7.disabled,\n\t\t\t    options = _props7.options,\n\t\t\t    menu = _props7.menu,\n\t\t\t    toggler = _props7.toggler,\n\t\t\t    fallback = _props7.fallback,\n\t\t\t    native = _props7.native,\n\t\t\t    nativeExpanded = _props7.nativeExpanded,\n\t\t\t    tabIndex = _props7.tabIndex,\n\t\t\t    children = _props7.children;\n\n\n\t\t\tif (menu) {\n\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: (0, _classnames2.default)({\n\t\t\t\t\t\t\t'rrui__rich__fallback': fallback\n\t\t\t\t\t\t}) },\n\t\t\t\t\ttoggler\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn _react2.default.createElement(\n\t\t\t\t'select',\n\t\t\t\t{\n\t\t\t\t\tref: function ref(_ref9) {\n\t\t\t\t\t\treturn _this6.native = _ref9;\n\t\t\t\t\t},\n\t\t\t\t\tid: id,\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: value_is_empty(value) ? Empty_value_option_value : value,\n\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\tonChange: this.native_select_on_change,\n\t\t\t\t\ttabIndex: native || nativeExpanded ? tabIndex : undefined,\n\t\t\t\t\tclassName: (0, _classnames2.default)('rrui__input', 'rrui__select__native', {\n\t\t\t\t\t\t'rrui__select__native-expanded': nativeExpanded,\n\t\t\t\t\t\t'rrui__rich__fallback': fallback\n\t\t\t\t\t}) },\n\t\t\t\toptions ? this.render_native_select_options(options, value_is_empty(value)) : _react2.default.Children.map(children, function (child) {\n\t\t\t\t\tif (!child) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t\t'option',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tclassName: 'rrui__select__native-option',\n\t\t\t\t\t\t\tkey: child.props.value,\n\t\t\t\t\t\t\tvalue: child.props.value },\n\t\t\t\t\t\tchild.props.label\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}, {\n\t\tkey: 'render_native_select_options',\n\t\tvalue: function render_native_select_options(options, empty_option_is_selected) {\n\t\t\tvar placeholder = this.props.placeholder;\n\n\n\t\t\tvar empty_option_present = false;\n\n\t\t\tvar rendered_options = options.map(function (option) {\n\t\t\t\tvar value = option.value,\n\t\t\t\t    label = option.label;\n\n\n\t\t\t\tif (value_is_empty(value)) {\n\t\t\t\t\tempty_option_present = true;\n\t\t\t\t\tvalue = Empty_value_option_value;\n\t\t\t\t}\n\n\t\t\t\treturn _react2.default.createElement(\n\t\t\t\t\t'option',\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: 'rrui__select__native-option',\n\t\t\t\t\t\tkey: get_option_key(value),\n\t\t\t\t\t\tvalue: value },\n\t\t\t\t\tlabel\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tif (empty_option_is_selected && !empty_option_present) {\n\t\t\t\trendered_options.unshift(_react2.default.createElement(\n\t\t\t\t\t'option',\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: 'rrui__select__native-option',\n\t\t\t\t\t\tkey: get_option_key(undefined),\n\t\t\t\t\t\tvalue: '' },\n\t\t\t\t\tplaceholder\n\t\t\t\t));\n\t\t\t}\n\n\t\t\treturn rendered_options;\n\t\t}\n\n\t\t// Whether should indicate that the input value is invalid\n\n\t}, {\n\t\tkey: 'should_indicate_invalid',\n\t\tvalue: function should_indicate_invalid() {\n\t\t\tvar _props8 = this.props,\n\t\t\t    indicateInvalid = _props8.indicateInvalid,\n\t\t\t    error = _props8.error;\n\n\n\t\t\treturn indicateInvalid && error;\n\t\t}\n\t}, {\n\t\tkey: 'get_selected_option',\n\t\tvalue: function get_selected_option() {\n\t\t\tvar value = this.props.value;\n\n\n\t\t\treturn this.get_option(value);\n\t\t}\n\t}, {\n\t\tkey: 'get_option',\n\t\tvalue: function get_option(value) {\n\t\t\tvar _props9 = this.props,\n\t\t\t    options = _props9.options,\n\t\t\t    children = _props9.children;\n\n\n\t\t\tif (options) {\n\t\t\t\treturn options.filter(function (x) {\n\t\t\t\t\treturn x.value === value;\n\t\t\t\t})[0];\n\t\t\t}\n\n\t\t\tvar option = void 0;\n\n\t\t\t_react2.default.Children.forEach(children, function (child) {\n\t\t\t\tif (child.props.value === value) {\n\t\t\t\t\toption = child;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn option;\n\t\t}\n\t}, {\n\t\tkey: 'get_option_index',\n\t\tvalue: function get_option_index(option) {\n\t\t\tvar _props10 = this.props,\n\t\t\t    options = _props10.options,\n\t\t\t    children = _props10.children;\n\n\n\t\t\tif (options) {\n\t\t\t\treturn options.indexOf(option);\n\t\t\t}\n\n\t\t\tvar option_index = void 0;\n\n\t\t\t_react2.default.Children.forEach(children, function (child, index) {\n\t\t\t\tif (child.props.value === option.value) {\n\t\t\t\t\toption_index = index;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn option_index;\n\t\t}\n\t}, {\n\t\tkey: 'get_selected_option_label',\n\t\tvalue: function get_selected_option_label() {\n\t\t\tvar options = this.props.options;\n\n\n\t\t\tvar selected = this.get_selected_option();\n\n\t\t\tif (!selected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (options) {\n\t\t\t\treturn selected.label;\n\t\t\t}\n\n\t\t\treturn selected.props.label;\n\t\t}\n\t}, {\n\t\tkey: 'overflown',\n\t\tvalue: function overflown() {\n\t\t\tvar _props11 = this.props,\n\t\t\t    options = _props11.options,\n\t\t\t    maxItems = _props11.maxItems;\n\n\n\t\t\treturn options.length > maxItems;\n\t\t}\n\t}, {\n\t\tkey: 'scrollable_list_height',\n\t\tvalue: function scrollable_list_height(height, vertical_padding) {\n\t\t\tvar maxItems = this.props.maxItems;\n\n\t\t\t// (Adding vertical padding so that it shows these `maxItems` options fully)\n\n\t\t\treturn (height - 2 * vertical_padding) * (maxItems / this.get_options().length) + vertical_padding;\n\t\t}\n\t}, {\n\t\tkey: 'should_animate',\n\t\tvalue: function should_animate() {\n\t\t\treturn true;\n\n\t\t\t// return this.props.options.length >= this.props.transition_item_count_min\n\t\t}\n\t}, {\n\t\tkey: 'focus',\n\t\tvalue: function focus() {\n\t\t\tif (this.autocomplete) {\n\t\t\t\t_focus(this.autocomplete);\n\t\t\t} else {\n\t\t\t\t_focus(this.selected);\n\t\t\t}\n\t\t}\n\n\t\t// Would have used `onBlur={...}` event handler here\n\t\t// with `if (container.contains(event.relatedTarget))` condition,\n\t\t// but it doesn't work in IE in React.\n\t\t// https://github.com/facebook/react/issues/3751\n\t\t//\n\t\t// Therefore, using the hacky `document.onClick` handlers\n\t\t// and this `onKeyDown` Tab handler\n\t\t// until `event.relatedTarget` support is consistent in React.\n\t\t//\n\n\n\t\t// This handler is a workaround for `redux-form`\n\n\t}, {\n\t\tkey: 'get_options',\n\t\tvalue: function get_options() {\n\t\t\tvar _props12 = this.props,\n\t\t\t    autocomplete = _props12.autocomplete,\n\t\t\t    autocompleteShowAll = _props12.autocompleteShowAll,\n\t\t\t    maxItems = _props12.maxItems,\n\t\t\t    options = _props12.options;\n\t\t\tvar matching_options = this.state.matching_options;\n\n\n\t\t\tif (!autocomplete) {\n\t\t\t\treturn options;\n\t\t\t}\n\n\t\t\tif (autocompleteShowAll) {\n\t\t\t\treturn matching_options;\n\t\t\t}\n\n\t\t\treturn matching_options.slice(0, maxItems);\n\t\t}\n\n\t\t// Get the previous option (relative to the currently focused option)\n\n\t}, {\n\t\tkey: 'previous_focusable_option',\n\t\tvalue: function previous_focusable_option() {\n\t\t\tvar options = this.get_options();\n\t\t\tvar focused_option_value = this.state.focused_option_value;\n\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < options.length) {\n\t\t\t\tif (options[i].value === focused_option_value) {\n\t\t\t\t\tif (i - 1 >= 0) {\n\t\t\t\t\t\treturn options[i - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Get the next option (relative to the currently focused option)\n\n\t}, {\n\t\tkey: 'next_focusable_option',\n\t\tvalue: function next_focusable_option() {\n\t\t\tvar options = this.get_options();\n\t\t\tvar focused_option_value = this.state.focused_option_value;\n\n\n\t\t\tvar i = 0;\n\t\t\twhile (i < options.length) {\n\t\t\t\tif (options[i].value === focused_option_value) {\n\t\t\t\t\tif (i + 1 < options.length) {\n\t\t\t\t\t\treturn options[i + 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\n\t\t// Scrolls to an option having the value\n\n\t}, {\n\t\tkey: 'scroll_to',\n\t\tvalue: function scroll_to(value) {\n\t\t\tvar vertical_padding = this.state.vertical_padding;\n\n\n\t\t\tvar option_element = _reactDom2.default.findDOMNode(this.options[get_option_key(value)]);\n\t\t\tvar list = _reactDom2.default.findDOMNode(this.list);\n\n\t\t\t// If this option isn't even shown\n\t\t\t// (e.g. autocomplete)\n\t\t\t// then don't scroll to it because there's nothing to scroll to.\n\t\t\tif (!option_element) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar offset_top = option_element.offsetTop;\n\n\t\t\tvar is_first_option = list.firstChild === option_element;\n\n\t\t\t// If it's the first one - then scroll to list top\n\t\t\tif (is_first_option) {\n\t\t\t\toffset_top -= vertical_padding;\n\t\t\t}\n\n\t\t\tlist.scrollTop = offset_top;\n\t\t}\n\n\t\t// Fully shows an option having the `value` (scrolls to it if neccessary)\n\n\t}, {\n\t\tkey: 'show_option',\n\t\tvalue: function show_option(value, gravity) {\n\t\t\tvar vertical_padding = this.state.vertical_padding;\n\n\n\t\t\tvar option_element = _reactDom2.default.findDOMNode(this.options[get_option_key(value)]);\n\t\t\tvar list = _reactDom2.default.findDOMNode(this.list);\n\n\t\t\tvar is_first_option = list.firstChild === option_element;\n\t\t\tvar is_last_option = list.lastChild === option_element;\n\n\t\t\tswitch (gravity) {\n\t\t\t\tcase 'top':\n\t\t\t\t\tvar top_line = option_element.offsetTop;\n\n\t\t\t\t\tif (is_first_option) {\n\t\t\t\t\t\ttop_line -= vertical_padding;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (top_line < list.scrollTop) {\n\t\t\t\t\t\tlist.scrollTop = top_line;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\tcase 'bottom':\n\t\t\t\t\tvar bottom_line = option_element.offsetTop + option_element.offsetHeight;\n\n\t\t\t\t\tif (is_last_option) {\n\t\t\t\t\t\tbottom_line += vertical_padding;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bottom_line > list.scrollTop + list.offsetHeight) {\n\t\t\t\t\t\tlist.scrollTop = bottom_line - list.offsetHeight;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Calculates height of the expanded item list\n\n\t}, {\n\t\tkey: 'calculate_height',\n\t\tvalue: function calculate_height() {\n\t\t\tvar options = this.props.options;\n\n\n\t\t\tvar list_dom_node = _reactDom2.default.findDOMNode(this.list);\n\t\t\t// const border = parseInt(window.getComputedStyle(list_dom_node).borderTopWidth)\n\t\t\tvar height = list_dom_node.scrollHeight;\n\t\t\tvar vertical_padding = parseInt(window.getComputedStyle(list_dom_node).paddingTop);\n\n\t\t\t// For things like \"accordeon\".\n\t\t\t//\n\t\t\t// const images = list_dom_node.querySelectorAll('img')\n\t\t\t//\n\t\t\t// if (images.length > 0)\n\t\t\t// {\n\t\t\t// \treturn this.preload_images(list_dom_node, images)\n\t\t\t// }\n\n\t\t\tvar state = { height: height, vertical_padding: vertical_padding\n\n\t\t\t\t// If it's a regular `<select/>` with `<option/>`s\n\t\t\t\t// then calculate its height.\n\t\t\t};if (this.is_scrollable() && options && this.overflown()) {\n\t\t\t\tstate.list_height = this.scrollable_list_height(height, vertical_padding);\n\t\t\t}\n\n\t\t\tthis.setState(state);\n\t\t}\n\t}, {\n\t\tkey: 'is_scrollable',\n\t\tvalue: function is_scrollable() {\n\t\t\tvar _props13 = this.props,\n\t\t\t    menu = _props13.menu,\n\t\t\t    autocomplete = _props13.autocomplete,\n\t\t\t    autocompleteShowAll = _props13.autocompleteShowAll,\n\t\t\t    scroll = _props13.scroll;\n\n\n\t\t\treturn !menu && (autocomplete && autocompleteShowAll || !autocomplete) && scroll;\n\t\t}\n\n\t\t// This turned out not to work for `autocomplete`\n\t\t// because not all options are ever shown.\n\t\t// get_widest_label_width()\n\t\t// {\n\t\t// \t// <ul/> -> <li/> -> <button/>\n\t\t// \tconst label = ReactDOM.findDOMNode(this.list).firstChild.firstChild\n\t\t//\n\t\t// \tconst style = getComputedStyle(label)\n\t\t//\n\t\t// \tconst width = parseFloat(style.width)\n\t\t// \tconst side_padding = parseFloat(style.paddingLeft)\n\t\t//\n\t\t// \treturn width - 2 * side_padding\n\t\t// }\n\n\t}, {\n\t\tkey: 'get_matching_options',\n\t\tvalue: function get_matching_options(options, value) {\n\t\t\t// If the autocomplete value is `undefined` or empty\n\t\t\tif (!value) {\n\t\t\t\treturn options;\n\t\t\t}\n\n\t\t\tvalue = value.toLowerCase();\n\n\t\t\treturn options.filter(function (_ref10) {\n\t\t\t\tvar label = _ref10.label,\n\t\t\t\t    verbose = _ref10.verbose;\n\n\t\t\t\treturn (verbose || label).toLowerCase().indexOf(value) >= 0;\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn Select;\n}(_react.PureComponent);\n\nSelect.propTypes = {\n\t// A list of selectable options\n\toptions: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n\t\t// Option value (may be `undefined`)\n\t\tvalue: value_prop_type,\n\t\t// Option label (may be `undefined`)\n\t\tlabel: _propTypes2.default.string,\n\t\t// Option icon\n\t\ticon: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func])\n\t})),\n\n\t// HTML form input `name` attribute\n\tname: _propTypes2.default.string,\n\n\t// Label which is placed above the select\n\tlabel: _propTypes2.default.string,\n\n\t// Placeholder (like \"Choose\")\n\tplaceholder: _propTypes2.default.string,\n\n\t// Whether to use native `<select/>`\n\tnative: _propTypes2.default.bool.isRequired,\n\n\t// Whether to use native `<select/>` when expanded\n\tnativeExpanded: _propTypes2.default.bool.isRequired,\n\n\t// Show icon only for selected item,\n\t// and only if `concise` is `true`.\n\tsaveOnIcons: _propTypes2.default.bool,\n\n\t// Disables this control\n\tdisabled: _propTypes2.default.bool,\n\n\t// Set to `true` to mark the field as required\n\trequired: _propTypes2.default.bool.isRequired,\n\n\t// Selected option value\n\tvalue: value_prop_type,\n\n\t// Is called when an option is selected\n\tonChange: _propTypes2.default.func,\n\n\t// Is called when the select is focused\n\tonFocus: _propTypes2.default.func,\n\n\t// Is called when the select is blurred.\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted text.\n\tonBlur: _propTypes2.default.func,\n\n\t// (exotic use case)\n\t// Falls back to a plain HTML input\n\t// when javascript is disabled (e.g. Tor)\n\tfallback: _propTypes2.default.bool.isRequired,\n\n\t// Component CSS class\n\tclassName: _propTypes2.default.string,\n\n\t// Autocomplete `<input/>` CSS class\n\tinputClassName: _propTypes2.default.string,\n\n\t// `<button/>` toggler CSS class\n\ttoggleClassName: _propTypes2.default.string,\n\n\t// CSS style object\n\tstyle: _propTypes2.default.object,\n\n\t// If this flag is set to `true`,\n\t// and `icon` is specified for a selected option,\n\t// then the selected option will be displayed\n\t// as icon only, without the label.\n\tconcise: _propTypes2.default.bool,\n\n\t// If this flag is set to `true`,\n\t// then it makes `<Select/>` not stretch itself\n\t// to 100% width by making it `inline-block`.\n\t// Is set to `true` when `concise` is `true`\n\t// because it makes sense.\n\tcompact: _propTypes2.default.bool,\n\n\t// HTML `tabindex` attribute\n\ttabIndex: _propTypes2.default.number,\n\n\t// If set to `true`, autocompletion is available\n\t// upon expanding the options list.\n\tautocomplete: _propTypes2.default.bool,\n\n\t// If set to `true`, autocomple will show all\n\t// matching options instead of just `maxItems`.\n\tautocompleteShowAll: _propTypes2.default.bool,\n\n\t// Options list alignment (\"left\", \"right\")\n\talignment: _propTypes2.default.oneOf(['left', 'right']),\n\n\t// If `menu` flag is set to `true`\n\t// then it's gonna be a dropdown menu\n\t// with `children` elements inside\n\t// and therefore `onChange` won't be called\n\t// on menu item click.\n\tmenu: _propTypes2.default.bool,\n\n\t// If `menu` flag is set to `true`\n\t// then `toggler` is the dropdown menu button.\n\t// E.g. `toggler={<DropDownMenuButton/>}`.\n\t// `toggler` must accept `onClick` and `onKeyDown` properties.\n\ttoggler: _propTypes2.default.element,\n\n\t// If `scroll` is `false`, then options list\n\t// is not limited in height.\n\t// Is `true` by default (scrollable).\n\tscroll: _propTypes2.default.bool.isRequired,\n\n\t// If this flag is set to `true`,\n\t// then the dropdown expands itself upward.\n\t// (as opposed to the default downward)\n\tupward: _propTypes2.default.bool,\n\n\t// Maximum items fitting the options list height (scrollable).\n\t// In case of `autocomplete` that's the maximum number of matched items shown.\n\t// Is `6` by default.\n\tmaxItems: _propTypes2.default.number.isRequired,\n\n\t// Is `true` by default (only when the list of options is scrollable)\n\tscrollbarPadding: _propTypes2.default.bool,\n\n\tfocusUponSelection: _propTypes2.default.bool.isRequired,\n\n\t// When the `<Select/>` is expanded\n\t// the options list may not fit on the screen.\n\t// If `scrollIntoView` is `true` (which is the default)\n\t// then the browser will automatically scroll\n\t// so that the expanded options list fits on the screen.\n\tscrollIntoView: _propTypes2.default.bool.isRequired,\n\n\t// If `scrollIntoView` is `true` (which is the default)\n\t// then this is gonna be the delay after which it scrolls into view.\n\texpandAnimationDuration: _propTypes2.default.number.isRequired,\n\n\tonTabOut: _propTypes2.default.func,\n\n\tonToggle: _propTypes2.default.func,\n\n\t// `aria-label` for the `<Select/>`'s `<button/>`\n\tariaLabel: _propTypes2.default.string.isRequired,\n\n\t// `aria-label` for the \"Close\" button\n\t// (which is an \"x\" visible in fullscreen mode).\n\tcloseAriaLabel: _propTypes2.default.string.isRequired,\n\n\t// The \"x\" button that closes the `<Select/>`\n\t// in fullscreen mode on mobile devices.\n\tcloseButton: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.oneOf([false])]).isRequired\n\n\t// transition_item_count_min : PropTypes.number,\n\t// transition_duration_min : PropTypes.number,\n\t// transition_duration_max : PropTypes.number\n};\nSelect.defaultProps = {\n\talignment: 'left',\n\tscroll: true,\n\tmaxItems: 6,\n\tscrollbarPadding: true,\n\tfocusUponSelection: true,\n\tfallback: false,\n\tnative: false,\n\tnativeExpanded: false,\n\tscrollIntoView: true,\n\texpandAnimationDuration: 150,\n\n\t// Set to `true` to mark the field as required\n\trequired: false,\n\n\t// `aria-label` for the `<Select/>`'s `<button/>`\n\tariaLabel: 'Select country',\n\n\t// `aria-label` for the \"Close\" button\n\t// (which is an \"x\" visible in fullscreen mode).\n\tcloseAriaLabel: 'Close',\n\n\t// The \"x\" button that closes the `<Select/>`\n\t// in fullscreen mode on mobile devices.\n\tcloseButton: _react2.default.createElement(\n\t\t'svg',\n\t\t{ viewBox: '0 0 22 21', className: 'rrui__select__close-icon' },\n\t\t_react2.default.createElement(\n\t\t\t'g',\n\t\t\t{ stroke: 'none', strokeWidth: '1', fill: 'none', fillRule: 'evenodd', strokeLinecap: 'round' },\n\t\t\t_react2.default.createElement(\n\t\t\t\t'g',\n\t\t\t\t{ className: 'rrui__select__close-icon-path', transform: 'translate(-1367.000000, -40.000000)', strokeWidth: '1' },\n\t\t\t\t_react2.default.createElement(\n\t\t\t\t\t'g',\n\t\t\t\t\t{ transform: 'translate(1368.000000, 41.000000)' },\n\t\t\t\t\t_react2.default.createElement('path', { d: 'M0.807611845,0.307611845 L19.1923882,18.6923882' }),\n\t\t\t\t\t_react2.default.createElement('path', { d: 'M0.807611845,0.307611845 L19.1923882,18.6923882', transform: 'translate(10.000000, 9.500000) scale(-1, 1) translate(-10.000000, -9.500000) ' })\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n\n\t// transition_item_count_min : 1,\n\t// transition_duration_min : 60, // milliseconds\n\t// transition_duration_max : 100 // milliseconds\n};\n\nvar _initialiseProps = function _initialiseProps() {\n\tvar _this7 = this;\n\n\tthis.state = {\n\t\t// Is initialized during the first `componentDidUpdate()` call\n\t\tvertical_padding: 0\n\t};\n\n\tthis.native_select_on_change = function (event) {\n\t\tvar _props14 = _this7.props,\n\t\t    onChange = _props14.onChange,\n\t\t    previous_value = _props14.value;\n\n\n\t\tvar value = event.target.value;\n\n\t\t// Convert back from an empty string to `undefined`\n\t\tif (value === Empty_value_option_value) {\n\t\t\t// `null` is not accounted for, use `undefined` instead.\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\t// Call `onChange` only if `value` did actually change\n\t\tif (value !== previous_value) {\n\t\t\tonChange(value);\n\t\t}\n\t};\n\n\tthis.resize_native_expanded_select = function () {\n\t\t// For some strange reason 1px on the right side of the `<select/>`\n\t\t// still falls through to the underlying selected option label.\n\t\t_reactDom2.default.findDOMNode(_this7.native).style.width = _reactDom2.default.findDOMNode(_this7.selected).offsetWidth + 1 + 'px';\n\t};\n\n\tthis.toggle = function (event) {\n\t\tvar toggle_options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tif (event) {\n\t\t\t// Don't navigate away when clicking links\n\t\t\tevent.preventDefault();\n\n\t\t\t// Not discarding the click event because\n\t\t\t// other expanded selects may be listening to it.\n\t\t\t// // Discard the click event so that it won't reach `document` click listener\n\t\t\t// event.stopPropagation() // doesn't work\n\t\t\t// event.nativeEvent.stopImmediatePropagation()\n\t\t}\n\n\t\tvar _props15 = _this7.props,\n\t\t    menu = _props15.menu,\n\t\t    toggler = _props15.toggler,\n\t\t    disabled = _props15.disabled,\n\t\t    autocomplete = _props15.autocomplete,\n\t\t    options = _props15.options,\n\t\t    value = _props15.value,\n\t\t    focusUponSelection = _props15.focusUponSelection,\n\t\t    onToggle = _props15.onToggle,\n\t\t    nativeExpanded = _props15.nativeExpanded,\n\t\t    scrollIntoView = _props15.scrollIntoView,\n\t\t    expandAnimationDuration = _props15.expandAnimationDuration;\n\n\n\t\tif (nativeExpanded) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!menu && options.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(_this7.toggle_timeout);\n\t\tclearTimeout(_this7.scroll_into_view_timeout);\n\t\tclearTimeout(_this7.restore_focus_on_collapse_timeout);\n\n\t\t_this7.toggle_timeout = undefined;\n\t\t_this7.scroll_into_view_timeout = undefined;\n\t\t_this7.restore_focus_on_collapse_timeout = undefined;\n\n\t\tvar expanded = _this7.state.expanded;\n\n\n\t\tif (!expanded && autocomplete) {\n\t\t\t_this7.setState({\n\t\t\t\t// The input value can't be `undefined`\n\t\t\t\t// because in that case React would complain\n\t\t\t\t// about it being an \"uncontrolled input\"\n\t\t\t\tautocomplete_input_value: '',\n\t\t\t\tmatching_options: options\n\t\t\t});\n\n\t\t\t// if (!this.state.autocomplete_width)\n\t\t\t// {\n\t\t\t// \tthis.setState({ autocomplete_width: this.get_widest_label_width() })\n\t\t\t// }\n\t\t}\n\n\t\t// Deferring expanding the select upon click\n\t\t// because `document.onClick(event)` should fire first,\n\t\t// otherwise `event.target` in that handler will be detached\n\t\t// from the document and so `this.document_clicked()` handler will\n\t\t// immediately toggle the select back to collapsed state.\n\t\t_this7.toggle_timeout = setTimeout(function () {\n\t\t\t_this7.toggle_timeout = undefined;\n\n\t\t\t_this7.setState({\n\t\t\t\texpanded: !expanded\n\t\t\t}, function () {\n\t\t\t\tvar is_now_expanded = _this7.state.expanded;\n\n\t\t\t\tif (!toggle_options.dont_focus_after_toggle) {\n\t\t\t\t\t// If it's autocomplete, then focus <input/> field\n\t\t\t\t\t// upon toggling the select component.\n\t\t\t\t\tif (autocomplete) {\n\t\t\t\t\t\tif (is_now_expanded) {\n\t\t\t\t\t\t\t// Focus the input after the select is expanded\n\t\t\t\t\t\t\t_focus(_this7.autocomplete);\n\t\t\t\t\t\t} else if (focusUponSelection) {\n\t\t\t\t\t\t\t// Focus the toggler after the select is collapsed\n\t\t\t\t\t\t\t_focus(_this7.selected);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// For some reason Firefox loses focus\n\t\t\t\t\t\t// upon select expansion via a click,\n\t\t\t\t\t\t// so this extra `.focus()` works around that issue.\n\t\t\t\t\t\t_focus(_this7.selected);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_this7.scroll_into_view_timeout = setTimeout(function () {\n\t\t\t\t\t_this7.scroll_into_view_timeout = undefined;\n\n\t\t\t\t\tvar is_still_expanded = _this7.state.expanded;\n\n\t\t\t\t\t// For some reason in IE 11 \"scroll into view\" scrolls\n\t\t\t\t\t// to the top of the page, therefore turn it off for IE.\n\t\t\t\t\tif (is_still_expanded && _this7.list && scrollIntoView && !is_internet_explorer()) {\n\t\t\t\t\t\tvar element = _reactDom2.default.findDOMNode(_this7.list);\n\n\t\t\t\t\t\t// https://developer.mozilla.org/ru/docs/Web/API/Element/scrollIntoViewIfNeeded\n\t\t\t\t\t\tif (element.scrollIntoViewIfNeeded) {\n\t\t\t\t\t\t\telement.scrollIntoViewIfNeeded(false);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// https://github.com/stipsan/scroll-into-view-if-needed\n\t\t\t\t\t\t\t(0, _scrollIntoViewIfNeeded2.default)(element, false, { duration: 800 });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, expandAnimationDuration * 1.1);\n\t\t\t});\n\n\t\t\tif (!expanded && options) {\n\t\t\t\t// Focus either the selected option\n\t\t\t\t// or the first option in the list.\n\n\t\t\t\tvar focused_option_value = value || options[0].value;\n\n\t\t\t\t_this7.setState({ focused_option_value: focused_option_value });\n\n\t\t\t\t// Scroll down to the focused option\n\t\t\t\t_this7.scroll_to(focused_option_value);\n\t\t\t}\n\n\t\t\tif (onToggle) {\n\t\t\t\tonToggle(!expanded);\n\t\t\t}\n\n\t\t\tif (toggle_options.callback) {\n\t\t\t\ttoggle_options.callback();\n\t\t\t}\n\t\t}, 0);\n\t};\n\n\tthis.item_clicked = function (value, event) {\n\t\tif (event) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\tvar _props16 = _this7.props,\n\t\t    onChange = _props16.onChange,\n\t\t    previous_value = _props16.value;\n\n\n\t\t_this7.toggle(undefined, {\n\t\t\tcallback: function callback() {\n\t\t\t\t// Call `onChange` only if `value` did actually change\n\t\t\t\tif (value !== previous_value) {\n\t\t\t\t\tonChange(value);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tthis.document_clicked = function (event) {\n\t\tvar autocomplete = _reactDom2.default.findDOMNode(_this7.autocomplete);\n\t\tvar selected_option = _reactDom2.default.findDOMNode(_this7.selected);\n\t\tvar options_list = _reactDom2.default.findDOMNode(_this7.list);\n\n\t\t// Don't close the select if its expander button has been clicked,\n\t\t// or if autocomplete has been clicked,\n\t\t// or if an option was selected from the list.\n\t\tif (options_list && options_list.contains(event.target) || autocomplete && autocomplete.contains(event.target) || selected_option && selected_option.contains(event.target)) {\n\t\t\treturn;\n\t\t}\n\n\t\t_this7.setState({ expanded: false });\n\n\t\tvar onToggle = _this7.props.onToggle;\n\n\n\t\tif (onToggle) {\n\t\t\tonToggle(false);\n\t\t}\n\t};\n\n\tthis.on_key_down_in_container = function (event) {\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar expanded = _this7.state.expanded;\n\n\n\t\tswitch (event.keyCode) {\n\t\t\t// Toggle on Tab out\n\t\t\tcase 9:\n\t\t\t\tif (expanded) {\n\t\t\t\t\t_this7.toggle(undefined, { dont_focus_after_toggle: true });\n\n\t\t\t\t\tvar onTabOut = _this7.props.onTabOut;\n\n\n\t\t\t\t\tif (onTabOut) {\n\t\t\t\t\t\tonTabOut(event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\tthis.on_key_down = function (event) {\n\t\tvar onKeyDown = _this7.props.onKeyDown;\n\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\n\t\tif ((0, _dom.submitFormOnCtrlEnter)(event, _this7.autocomplete || _this7.selected)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar _props17 = _this7.props,\n\t\t    options = _props17.options,\n\t\t    value = _props17.value,\n\t\t    autocomplete = _props17.autocomplete;\n\t\tvar _state5 = _this7.state,\n\t\t    expanded = _state5.expanded,\n\t\t    focused_option_value = _state5.focused_option_value;\n\n\t\t// Maybe add support for `children` arrow navigation in future\n\n\t\tif (options) {\n\t\t\tswitch (event.keyCode) {\n\t\t\t\t// Select the previous option (if present) on up arrow\n\t\t\t\tcase 38:\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tvar previous = _this7.previous_focusable_option();\n\n\t\t\t\t\tif (previous) {\n\t\t\t\t\t\t_this7.show_option(previous.value, 'top');\n\t\t\t\t\t\treturn _this7.setState({ focused_option_value: previous.value });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\t// Select the next option (if present) on down arrow\n\t\t\t\tcase 40:\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\tvar next = _this7.next_focusable_option();\n\n\t\t\t\t\tif (next) {\n\t\t\t\t\t\t_this7.show_option(next.value, 'bottom');\n\t\t\t\t\t\treturn _this7.setState({ focused_option_value: next.value });\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\t// Collapse on Escape\n\t\t\t\t//\n\t\t\t\t// Maybe add this kind of support for \"Escape\" key in some future:\n\t\t\t\t//  hiding the item list, cancelling current item selection process\n\t\t\t\t//  and restoring the selection present before the item list was toggled.\n\t\t\t\t//\n\t\t\t\tcase 27:\n\t\t\t\t\t// Collapse the list if it's expanded\n\t\t\t\t\tif (_this7.state.expanded) {\n\t\t\t\t\t\t_this7.toggle();\n\n\t\t\t\t\t\t// Restore focus when the list is collapsed\n\t\t\t\t\t\t_this7.restore_focus_on_collapse_timeout = setTimeout(function () {\n\t\t\t\t\t\t\t_this7.restore_focus_on_collapse_timeout = undefined;\n\t\t\t\t\t\t\t_focus(_this7.selected);\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\t// on Enter\n\t\t\t\tcase 13:\n\t\t\t\t\t// Choose the focused item on Enter\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// If an item is focused\n\t\t\t\t\t\t// (which may not be the case\n\t\t\t\t\t\t//  when autocomplete is matching no items)\n\t\t\t\t\t\t// (still for non-autocomplete select\n\t\t\t\t\t\t//  it is valid to have a default option)\n\t\t\t\t\t\tif (_this7.get_options() && _this7.get_options().length > 0) {\n\t\t\t\t\t\t\t// Choose the focused item\n\t\t\t\t\t\t\t_this7.item_clicked(focused_option_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Else it should have just submitted the form on Enter,\n\t\t\t\t\t// but it wouldn't because the select element activator is a <button/>\n\t\t\t\t\t// therefore hitting Enter while being focused on it just pushes that button.\n\t\t\t\t\t// So submit the enclosing form manually.\n\t\t\t\t\telse {\n\t\t\t\t\t\t\tif ((0, _dom.submitContainingForm)(_reactDom2.default.findDOMNode(_this7.select))) {\n\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\n\t\t\t\t// on Spacebar\n\t\t\t\tcase 32:\n\t\t\t\t\t// Choose the focused item on Enter\n\t\t\t\t\tif (expanded) {\n\t\t\t\t\t\t// only if it it's an `options` select\n\t\t\t\t\t\t// and also if it's not an autocomplete\n\t\t\t\t\t\tif (_this7.get_options() && !autocomplete) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t\t// `focused_option_value` could be non-existent\n\t\t\t\t\t\t\t// in case of `autocomplete`, but since\n\t\t\t\t\t\t\t// we're explicitly not handling autocomplete here\n\t\t\t\t\t\t\t// it is valid to select any options including the default ones.\n\t\t\t\t\t\t\t_this7.item_clicked(focused_option_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Otherwise, the spacebar keydown event on a `<button/>`\n\t\t\t\t\t// will trigger `onClick` and `.toggle()` will be called.\n\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.on_blur = function (event) {\n\t\tvar _props18 = _this7.props,\n\t\t    onBlur = _props18.onBlur,\n\t\t    value = _props18.value;\n\n\t\t// If clicked on a select option then don't trigger \"blur\" event\n\n\t\tif (event.relatedTarget && event.currentTarget.contains(event.relatedTarget)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t// `event.target.value` in its `onBlur` handler.\n\t\tif (onBlur) {\n\t\t\tvar _event = _extends({}, event, {\n\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\tvalue: value\n\t\t\t\t})\n\n\t\t\t\t// For `redux-form` event detection.\n\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\tonBlur(_event);\n\t\t}\n\t};\n\n\tthis.on_autocomplete_input_change = function (event) {\n\t\tvar options = _this7.props.options;\n\n\t\tvar input = event.target.value;\n\t\tvar matching_options = _this7.get_matching_options(options, input);\n\n\t\t_this7.setState({\n\t\t\tautocomplete_input_value: input,\n\t\t\tmatching_options: matching_options,\n\t\t\tfocused_option_value: matching_options.length > 0 ? matching_options[0].value : undefined\n\t\t});\n\t};\n};\n\nexports.default = Select;\n\n\nSelect.Separator = function (props) {\n\treturn _react2.default.createElement('div', { className: 'rrui__select__separator' });\n};\n\nvar native_expanded_select_container_style = {\n\tdisplay: 'inline-block'\n\n\t// There can be an `undefined` value,\n\t// so just `{ value }` won't do here.\n};function get_option_key(value) {\n\treturn value_is_empty(value) ? '@@rrui/select/undefined' : value;\n}\n\nfunction value_is_empty(value) {\n\treturn value === null || value === undefined;\n}\n\n// Detects Internet Explorer.\n// https://stackoverflow.com/questions/19999388/check-if-user-is-using-ie-with-jquery\nfunction is_internet_explorer() {\n\treturn window.navigator.userAgent.indexOf('MSIE ') > 0 || window.navigator.userAgent.indexOf('Trident/') > 0;\n}\n\n/**\r\n * Focuses on a React component (if any).\r\n * @param  {?object} component\r\n */\nfunction _focus(component) {\n\tif (!component) {\n\t\treturn;\n\t}\n\n\tif (typeof component.focus === 'function') {\n\t\treturn component.focus();\n\t}\n\n\tvar node = _reactDom2.default.findDOMNode(component);\n\tif (node) {\n\t\treturn node.focus();\n\t}\n}\n\nfunction render_icon(icon) {\n\treturn typeof icon === 'function' ? icon() : icon;\n}\n//# sourceMappingURL=Select.js.map","var BezierEasing = require('bezier-easing')\n\n// Predefined set of animations. Similar to CSS easing functions\nvar animations = {\n  ease:  BezierEasing(0.25, 0.1, 0.25, 1),\n  easeIn: BezierEasing(0.42, 0, 1, 1),\n  easeOut: BezierEasing(0, 0, 0.58, 1),\n  easeInOut: BezierEasing(0.42, 0, 0.58, 1),\n  linear: BezierEasing(0, 0, 1, 1)\n}\n\n\nmodule.exports = animate;\n\nfunction animate(source, target, options) {\n  var start= Object.create(null)\n  var diff = Object.create(null)\n  options = options || {}\n  // We let clients specify their own easing function\n  var easing = (typeof options.easing === 'function') ? options.easing : animations[options.easing]\n\n  // if nothing is specified, default to ease (similar to CSS animations)\n  if (!easing) {\n    if (options.easing) {\n      console.warn('Unknown easing function in amator: ' + options.easing);\n    }\n    easing = animations.ease\n  }\n\n  var step = typeof options.step === 'function' ? options.step : noop\n  var done = typeof options.done === 'function' ? options.done : noop\n\n  var scheduler = getScheduler(options.scheduler)\n\n  var keys = Object.keys(target)\n  keys.forEach(function(key) {\n    start[key] = source[key]\n    diff[key] = target[key] - source[key]\n  })\n\n  var durationInMs = options.duration || 400\n  var durationInFrames = Math.max(1, durationInMs * 0.06) // 0.06 because 60 frames pers 1,000 ms\n  var previousAnimationId\n  var frame = 0\n\n  previousAnimationId = scheduler.next(loop)\n\n  return {\n    cancel: cancel\n  }\n\n  function cancel() {\n    scheduler.cancel(previousAnimationId)\n    previousAnimationId = 0\n  }\n\n  function loop() {\n    var t = easing(frame/durationInFrames)\n    frame += 1\n    setValues(t)\n    if (frame <= durationInFrames) {\n      previousAnimationId = scheduler.next(loop)\n      step(source)\n    } else {\n      previousAnimationId = 0\n      setTimeout(function() { done(source) }, 0)\n    }\n  }\n\n  function setValues(t) {\n    keys.forEach(function(key) {\n      source[key] = diff[key] * t + start[key]\n    })\n  }\n}\n\nfunction noop() { }\n\nfunction getScheduler(scheduler) {\n  if (!scheduler) {\n    var canRaf = typeof window !== 'undefined' && window.requestAnimationFrame\n    return canRaf ? rafScheduler() : timeoutScheduler()\n  }\n  if (typeof scheduler.next !== 'function') throw new Error('Scheduler is supposed to have next(cb) function')\n  if (typeof scheduler.cancel !== 'function') throw new Error('Scheduler is supposed to have cancel(handle) function')\n\n  return scheduler\n}\n\nfunction rafScheduler() {\n  return {\n    next: window.requestAnimationFrame.bind(window),\n    cancel: window.cancelAnimationFrame.bind(window)\n  }\n}\n\nfunction timeoutScheduler() {\n  return {\n    next: function(cb) {\n      return setTimeout(cb, 1000/60)\n    },\n    cancel: function (id) {\n      return clearTimeout(id)\n    }\n  }\n}\n","/**\n * https://github.com/gre/bezier-easing\n * BezierEasing - use bezier curve for transition easing function\n * by Gaëtan Renaudeau 2014 - 2015 – MIT License\n */\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A (aA1, aA2) { return 1.0 - 3.0 * aA2 + 3.0 * aA1; }\nfunction B (aA1, aA2) { return 3.0 * aA2 - 6.0 * aA1; }\nfunction C (aA1)      { return 3.0 * aA1; }\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier (aT, aA1, aA2) { return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT; }\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope (aT, aA1, aA2) { return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1); }\n\nfunction binarySubdivide (aX, aA, aB, mX1, mX2) {\n  var currentX, currentT, i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\n\nfunction newtonRaphsonIterate (aX, aGuessT, mX1, mX2) {\n for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n   var currentSlope = getSlope(aGuessT, mX1, mX2);\n   if (currentSlope === 0.0) {\n     return aGuessT;\n   }\n   var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n   aGuessT -= currentX / currentSlope;\n }\n return aGuessT;\n}\n\nmodule.exports = function bezier (mX1, mY1, mX2, mY2) {\n  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  // Precompute samples table\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX (aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  return function BezierEasing (x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.submitFormOnCtrlEnter = submitFormOnCtrlEnter;\nexports.submitContainingForm = submitContainingForm;\nexports.getScrollbarWidth = getScrollbarWidth;\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Submits the form on `Ctrl` + `Enter` (or `Cmd` + `Enter`).\nfunction submitFormOnCtrlEnter(event, component) {\n\tif ((event.ctrlKey || event.metaKey) && event.keyCode === 13) {\n\t\tif (submitContainingForm(_reactDom2.default.findDOMNode(component))) {\n\t\t\tevent.preventDefault();\n\t\t\treturn true;\n\t\t}\n\t}\n}\n\nfunction submitContainingForm(node) {\n\twhile (node.parentElement) {\n\t\tnode = node.parentElement;\n\t\tif (node instanceof HTMLFormElement) {\n\t\t\t// Won't use `node.submit()` because it bypasses `onSubmit`.\n\t\t\t// Will click the submit button instead.\n\t\t\tvar submit = node.querySelector('button[type=submit]');\n\t\t\tif (submit) {\n\t\t\t\tsubmit.click();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction getScrollbarWidth() {\n\t// // `window.innerWidth` has a bug:\n\t// // it's decreases as the page scale is increased.\n\t// // Therefore not using it.\n\t// // (Full width) - (Width minus scrollbar)\n\t// return document.body.clientWidth - window.innerWidth\n\n\treturn 17;\n}\n//# sourceMappingURL=dom.js.map","// Checks whether the entire input sequence can be matched\n// against the regular expression.\nexport function matches_entirely() {\n\tvar text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar regular_expression = arguments[1];\n\n\tif (typeof regular_expression === 'string') {\n\t\tregular_expression = '^(?:' + regular_expression + ')$';\n\t}\n\n\tvar matched_groups = text.match(regular_expression);\n\treturn matched_groups && matched_groups[0].length === text.length;\n}\n//# sourceMappingURL=common.js.map","export function get_phone_code(country_metadata) {\n\treturn country_metadata[0];\n}\n\nexport function get_national_number_pattern(country_metadata) {\n\treturn country_metadata[1];\n}\n\nexport function get_formats(country_metadata) {\n\treturn country_metadata[2] || [];\n}\n\nexport function get_national_prefix(country_metadata) {\n\treturn country_metadata[3];\n}\n\nexport function get_national_prefix_formatting_rule(country_metadata) {\n\treturn country_metadata[4];\n}\n\nexport function get_national_prefix_for_parsing(country_metadata) {\n\tvar national_prefix_for_parsing = country_metadata[5];\n\n\t// If `national_prefix_for_parsing` is not set explicitly,\n\t// then infer it from `national_prefix` (if any)\n\tif (!national_prefix_for_parsing) {\n\t\tnational_prefix_for_parsing = get_national_prefix(country_metadata);\n\t}\n\n\treturn national_prefix_for_parsing;\n}\n\nexport function get_national_prefix_transform_rule(country_metadata) {\n\treturn country_metadata[6];\n}\n\nexport function get_national_prefix_is_optional_when_formatting(country_metadata) {\n\treturn country_metadata[7];\n}\n\nexport function get_leading_digits(country_metadata) {\n\treturn country_metadata[8];\n}\n\nexport function get_format_pattern(format_array) {\n\treturn format_array[0];\n}\n\nexport function get_format_format(format_array) {\n\treturn format_array[1];\n}\n\nexport function get_format_leading_digits_patterns(format_array) {\n\treturn format_array[2] || [];\n}\n\nexport function get_format_national_prefix_formatting_rule(format_array, country_metadata) {\n\treturn format_array[3] || get_national_prefix_formatting_rule(country_metadata);\n}\n\nexport function get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata) {\n\treturn format_array[4] || get_national_prefix_is_optional_when_formatting(country_metadata);\n}\n\nexport function get_format_national_prefix_is_mandatory_when_formatting(format_array, country_metadata) {\n\tvar national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format_array, country_metadata);\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when the national prefix formatting rule\n\t// contains no national prefix itself, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\treturn national_prefix_formatting_rule &&\n\t// Check that national prefix formatting rule is not a dummy one.\n\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\tget_format_uses_national_prefix(national_prefix_formatting_rule) &&\n\t// Or maybe national prefix is optional for this format\n\t!get_format_national_prefix_is_optional_when_formatting(format_array, country_metadata);\n}\n\n// Checks whether national prefix formatting rule contains national prefix\nexport function get_format_uses_national_prefix(national_prefix_formatting_rule) {\n\t// Check that national prefix formatting rule is not a dummy one\n\treturn national_prefix_formatting_rule !== '$1' &&\n\t// Check that national prefix formatting rule actually has national prefix digit(s)\n\t/\\d/.test(national_prefix_formatting_rule.replace('$1', ''));\n}\n\nexport function get_format_international_format(format_array) {\n\treturn format_array[5] || get_format_format(format_array);\n}\n\n// Formatting information for regions which share\n// a country calling code is contained by only one region\n// for performance reasons. For example, for NANPA region\n// (\"North American Numbering Plan Administration\",\n//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n// it will be contained in the metadata for `US`.\nexport function get_metadata_by_country_phone_code(country_phone_code, metadata) {\n\tvar country_code = metadata.country_phone_code_to_countries[country_phone_code][0];\n\treturn metadata.countries[country_code];\n}\n\nexport function get_types(country_metadata) {\n\treturn country_metadata[9];\n}\n\nfunction get_type(country_metadata, index) {\n\treturn get_types(country_metadata) ? get_types(country_metadata)[index] : undefined;\n}\n\nexport function get_type_fixed_line(country_metadata) {\n\treturn get_type(country_metadata, 0);\n}\n\nexport function get_type_mobile(country_metadata) {\n\treturn get_type(country_metadata, 1);\n}\n\nexport function get_type_toll_free(country_metadata) {\n\treturn get_type(country_metadata, 2);\n}\n\nexport function get_type_premium_rate(country_metadata) {\n\treturn get_type(country_metadata, 3);\n}\n\nexport function get_type_personal_number(country_metadata) {\n\treturn get_type(country_metadata, 4);\n}\n\nexport function get_type_voice_mail(country_metadata) {\n\treturn get_type(country_metadata, 5);\n}\n\nexport function get_type_uan(country_metadata) {\n\treturn get_type(country_metadata, 6);\n}\n\nexport function get_type_pager(country_metadata) {\n\treturn get_type(country_metadata, 7);\n}\n\nexport function get_type_voip(country_metadata) {\n\treturn get_type(country_metadata, 8);\n}\n\nexport function get_type_shared_cost(country_metadata) {\n\treturn get_type(country_metadata, 9);\n}\n\nexport function get_country_phone_code(country, country_metadata) {\n\treturn get_phone_code(country_metadata[country]);\n}\n//# sourceMappingURL=metadata.js.map","import _getIterator from 'babel-runtime/core-js/get-iterator';\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { matches_entirely } from './common';\n\nimport { parse_phone_number_and_country_phone_code, VALID_PUNCTUATION } from './parse';\n\nimport { get_phone_code, get_formats, get_format_pattern, get_format_format, get_format_leading_digits_patterns, get_format_national_prefix_formatting_rule, get_format_national_prefix_is_optional_when_formatting, get_format_international_format, get_metadata_by_country_phone_code } from './metadata';\n\n// Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// format('8005553535', 'RU', 'International')\n// format('8005553535', 'RU', 'International', metadata)\n// format({ phone: '8005553535', country: 'RU' }, 'International')\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\n// format('+78005553535', 'National')\n// format('+78005553535', 'National', metadata)\n// ```\n//\nexport default function format(first_argument, second_argument, third_argument, fourth_argument) {\n\tvar _sort_out_arguments = sort_out_arguments(first_argument, second_argument, third_argument, fourth_argument),\n\t    input = _sort_out_arguments.input,\n\t    format_type = _sort_out_arguments.format_type,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tvar country_metadata = void 0;\n\n\tif (input.country) {\n\t\tcountry_metadata = metadata.countries[input.country];\n\t}\n\n\tvar _parse_phone_number_a = parse_phone_number_and_country_phone_code(input.phone, metadata),\n\t    country_phone_code = _parse_phone_number_a.country_phone_code,\n\t    number = _parse_phone_number_a.number;\n\n\tif (country_phone_code) {\n\t\t// Check country restriction\n\t\tif (input.country && country_metadata && country_phone_code !== get_phone_code(country_metadata)) {\n\t\t\treturn input.phone;\n\t\t}\n\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata);\n\t}\n\n\tif (!country_metadata) {\n\t\treturn input.phone;\n\t}\n\n\tswitch (format_type) {\n\t\tcase 'International':\n\t\t\tif (!number) {\n\t\t\t\treturn '+' + get_phone_code(country_metadata);\n\t\t\t}\n\t\t\tvar national_number = format_national_number(number, 'International', false, country_metadata);\n\t\t\treturn '+' + get_phone_code(country_metadata) + ' ' + national_number;\n\n\t\tcase 'International_plaintext':\n\t\t\treturn '+' + get_phone_code(country_metadata) + input.phone;\n\n\t\tcase 'National':\n\t\t\tif (!number) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\treturn format_national_number(number, 'National', false, country_metadata);\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport var FIRST_GROUP_PATTERN = /(\\$\\d)/;\n\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, country_metadata) {\n\tvar format_pattern_matcher = new RegExp(get_format_pattern(format));\n\n\tvar national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, country_metadata);\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\tvar national_prefix_may_be_omitted = !national_prefix_formatting_rule || national_prefix_formatting_rule && get_format_national_prefix_is_optional_when_formatting(format, country_metadata) && !enforce_national_prefix;\n\n\tif (!international && !national_prefix_may_be_omitted) {\n\t\treturn number.replace(format_pattern_matcher, get_format_format(format).replace(FIRST_GROUP_PATTERN, national_prefix_formatting_rule));\n\t}\n\n\tvar formatted_number = number.replace(format_pattern_matcher, international ? get_format_international_format(format) : get_format_format(format));\n\n\tif (international) {\n\t\treturn local_to_international_style(formatted_number);\n\t}\n\n\treturn formatted_number;\n}\n\nexport function format_national_number(number, format_as, enforce_national_prefix, country_metadata) {\n\tvar format = choose_format_for_number(get_formats(country_metadata), number);\n\n\tif (!format) {\n\t\treturn number;\n\t}\n\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, country_metadata);\n}\n\nexport function choose_format_for_number(available_formats, national_number) {\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = _getIterator(available_formats), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar _format = _step.value;\n\n\t\t\t// Validate leading digits\n\t\t\tif (get_format_leading_digits_patterns(_format).length > 0) {\n\t\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\t\tvar last_leading_digits_pattern = get_format_leading_digits_patterns(_format)[get_format_leading_digits_patterns(_format).length - 1];\n\n\t\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check that the national number matches the phone number format regular expression\n\t\t\tif (matches_entirely(national_number, new RegExp(get_format_pattern(_format)))) {\n\t\t\t\treturn _format;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local) {\n\treturn local.replace(new RegExp('[' + VALID_PUNCTUATION + ']+', 'g'), ' ').trim();\n}\n\n// Sort out arguments\nfunction sort_out_arguments() {\n\tvar first_argument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\tvar second_argument = arguments[1];\n\tvar third_argument = arguments[2];\n\tvar fourth_argument = arguments[3];\n\n\tvar input = void 0;\n\tvar format_type = void 0;\n\tvar metadata = void 0;\n\n\t// Sort out arguments\n\tif (typeof first_argument === 'string') {\n\t\t// If country code is supplied\n\t\tif (typeof third_argument === 'string') {\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput = {\n\t\t\t\tphone: first_argument,\n\t\t\t\tcountry: second_argument\n\t\t\t};\n\n\t\t\tformat_type = third_argument;\n\t\t\tmetadata = fourth_argument;\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\telse {\n\t\t\t\t// Will be `parse()`d later in code\n\t\t\t\tinput = {\n\t\t\t\t\tphone: first_argument\n\t\t\t\t};\n\n\t\t\t\tif (typeof second_argument !== 'string') {\n\t\t\t\t\tthrow new Error('Format type argument not passed for `format()`');\n\t\t\t\t}\n\n\t\t\t\tformat_type = second_argument;\n\t\t\t\tmetadata = third_argument;\n\t\t\t}\n\t} else {\n\t\tinput = first_argument;\n\t\tformat_type = second_argument;\n\t\tmetadata = third_argument;\n\t}\n\n\t// Sanity check\n\tif (!metadata) {\n\t\tthrow new Error('Metadata not passed');\n\t}\n\n\tswitch (format_type) {\n\t\tcase 'International':\n\t\tcase 'International_plaintext':\n\t\tcase 'National':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error('Unknown format type argument passed to \"format()\": \"' + format_type + '\"');\n\t}\n\n\treturn { input: input, format_type: format_type, metadata: metadata };\n}\n//# sourceMappingURL=format.js.map","import parse, { is_viable_phone_number } from './parse';\n\nimport { matches_entirely } from './common';\n\nimport { get_national_number_pattern, get_type_fixed_line, get_type_mobile, get_type_toll_free, get_type_premium_rate, get_type_personal_number, get_type_voice_mail, get_type_uan, get_type_pager, get_type_voip, get_type_shared_cost } from './metadata';\n\n// Finds out national phone number type (fixed line, mobile, etc)\nexport default function get_number_type(first_argument, second_argument, third_argument) {\n\tvar _sort_out_arguments = sort_out_arguments(first_argument, second_argument, third_argument),\n\t    input = _sort_out_arguments.input,\n\t    metadata = _sort_out_arguments.metadata;\n\n\t// Sanity check\n\n\n\tif (!metadata) {\n\t\tthrow new Error('Metadata not passed');\n\t}\n\n\t// When no input was passed\n\tif (!input) {\n\t\treturn;\n\t}\n\n\t// When `parse()` returned `{}`\n\t// meaning that the phone number is not a valid one.\n\tif (!input.country) {\n\t\treturn;\n\t}\n\n\tvar national_number = input.phone;\n\tvar country_metadata = metadata.countries[input.country];\n\n\t// The following is copy-pasted from the original function:\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\n\n\t// Is this national number even valid for this country\n\tif (!is_of_type(national_number, get_national_number_pattern(country_metadata))) {\n\t\treturn; // 'UNKNOWN'\n\t}\n\n\tif (is_of_type(national_number, get_type_premium_rate(country_metadata))) {\n\t\treturn 'PREMIUM_RATE';\n\t}\n\n\tif (is_of_type(national_number, get_type_toll_free(country_metadata))) {\n\t\treturn 'TOLL_FREE';\n\t}\n\n\t/* istanbul ignore if */\n\tif (is_of_type(national_number, get_type_shared_cost(country_metadata))) {\n\t\treturn 'SHARED_COST';\n\t}\n\n\t/* istanbul ignore if */\n\tif (is_of_type(national_number, get_type_voip(country_metadata))) {\n\t\treturn 'VOIP';\n\t}\n\n\tif (is_of_type(national_number, get_type_personal_number(country_metadata))) {\n\t\treturn 'PERSONAL_NUMBER';\n\t}\n\n\t/* istanbul ignore if */\n\tif (is_of_type(national_number, get_type_pager(country_metadata))) {\n\t\treturn 'PAGER';\n\t}\n\n\t/* istanbul ignore if */\n\tif (is_of_type(national_number, get_type_uan(country_metadata))) {\n\t\treturn 'UAN';\n\t}\n\n\t/* istanbul ignore if */\n\tif (is_of_type(national_number, get_type_voice_mail(country_metadata))) {\n\t\treturn 'VOICEMAIL';\n\t}\n\n\t// Is it fixed line number\n\tif (is_of_type(national_number, get_type_fixed_line(country_metadata))) {\n\t\t// Because duplicate regular expressions are removed\n\t\t// to reduce metadata size, if there's no \"mobile\" pattern\n\t\t// then it means it was removed due to being a duplicate of some other pattern.\n\t\t//\n\t\tif (!get_type_mobile(country_metadata)) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\n\t\t// (no such country in the minimal metadata set)\n\t\t/* istanbul ignore if */\n\t\tif (is_of_type(national_number, get_type_mobile(country_metadata))) {\n\t\t\treturn 'FIXED_LINE_OR_MOBILE';\n\t\t}\n\n\t\treturn 'FIXED_LINE';\n\t}\n\n\tif (is_of_type(national_number, get_type_mobile(country_metadata))) {\n\t\treturn 'MOBILE';\n\t}\n\n\t// return 'UNKNOWN'\n}\n\nexport function is_of_type(national_number, type) {\n\t// // Check if any possible number lengths are present;\n\t// // if so, we use them to avoid checking\n\t// // the validation pattern if they don't match.\n\t// // If they are absent, this means they match\n\t// // the general description, which we have\n\t// // already checked before a specific number type.\n\t// if (get_possible_lengths(type) &&\n\t// \tget_possible_lengths(type).indexOf(national_number.length) === -1)\n\t// {\n\t// \treturn false\n\t// }\n\n\t// get_type_pattern(type) === type\n\treturn matches_entirely(national_number, type);\n}\n\n// Sort out arguments\nexport function sort_out_arguments(first_argument, second_argument, third_argument) {\n\tvar input = void 0;\n\tvar metadata = void 0;\n\n\t// Normalize numerical `value`.\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/142\n\tif (typeof first_argument === 'number') {\n\t\tfirst_argument = String(first_argument);\n\t}\n\n\tif (typeof first_argument === 'string') {\n\t\t// If country code is supplied\n\t\tif (typeof second_argument === 'string' || second_argument === undefined) {\n\t\t\tmetadata = third_argument;\n\n\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t// while this `validate` function needs to verify\n\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\tif (is_viable_phone_number(first_argument)) {\n\t\t\t\tinput = parse(first_argument, second_argument, metadata);\n\t\t\t}\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\telse {\n\t\t\t\tmetadata = second_argument;\n\n\t\t\t\t// `parse` extracts phone numbers from raw text,\n\t\t\t\t// therefore it will cut off all \"garbage\" characters,\n\t\t\t\t// while this `validate` function needs to verify\n\t\t\t\t// that the phone number contains no \"garbage\"\n\t\t\t\t// therefore the explicit `is_viable_phone_number` check.\n\t\t\t\tif (is_viable_phone_number(first_argument)) {\n\t\t\t\t\tinput = parse(first_argument, metadata);\n\t\t\t\t}\n\t\t\t}\n\t} else {\n\t\t// The `first_argument` must be a valid phone number\n\t\t// as a whole, not just a part of it which gets parsed here.\n\t\tif (first_argument && first_argument.phone && is_viable_phone_number(first_argument.phone)) {\n\t\t\tinput = first_argument;\n\t\t}\n\n\t\tmetadata = second_argument;\n\t}\n\n\treturn { input: input, metadata: metadata };\n}\n//# sourceMappingURL=get number type.js.map","import _getIterator from 'babel-runtime/core-js/get-iterator';\nimport _extends from 'babel-runtime/helpers/extends';\n// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport { matches_entirely } from './common';\n\nimport { get_phone_code, get_national_number_pattern, get_national_prefix_for_parsing, get_national_prefix_transform_rule, get_leading_digits, get_metadata_by_country_phone_code, get_formats } from\n// get_format_national_prefix_is_mandatory_when_formatting\n'./metadata';\n\nimport { choose_format_for_number } from './format';\n\nimport get_number_type from './get number type';\n\nexport var PLUS_CHARS = '+\\uFF0B';\n\n// Digits accepted in phone numbers\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\nexport var VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9';\n\n// `DASHES` will be right after the opening square bracket of the \"character class\"\nvar DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D';\nvar SLASHES = '\\uFF0F/';\nvar DOTS = '\\uFF0E.';\nvar WHITESPACE = ' \\xA0\\xAD\\u200B\\u2060\\u3000';\nvar BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]';\nvar TILDES = '~\\u2053\\u223C\\uFF5E';\n\n// Regular expression of acceptable punctuation found in phone numbers. This\n// excludes punctuation found as a leading character only. This consists of dash\n// characters, white space characters, full stops, slashes, square brackets,\n// parentheses and tildes. Full-width variants are also present.\nexport var VALID_PUNCTUATION = '' + DASHES + SLASHES + DOTS + WHITESPACE + BRACKETS + TILDES;\n\n//  Regular expression of viable phone numbers. This is location independent.\n//  Checks we have at least three leading digits, and only valid punctuation,\n//  alpha characters and digits in the phone number. Does not include extension\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\n//  used as a placeholder for carrier codes, for example in Brazilian phone\n//  numbers. We also allow multiple '+' characters at the start.\n//\n//  Corresponds to the following:\n//  [digits]{minLengthNsn}|\n//  plus_sign*\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\n//\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\n//  The second expression restricts the number of digits to three or more, but\n//  then allows them to be in international form, and to have alpha-characters\n//  and punctuation. We split up the two reg-exes here and combine them when\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\n//  with ^ and append $ to each branch.\n//\n//  \"Note VALID_PUNCTUATION starts with a -,\n//   so must be the first in the range\" (c) Google devs.\n//  (wtf did they mean by saying that; probably nothing)\n//\nvar MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}';\n//\n// And this is the second reg-exp:\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\n//\nvar VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\n// The combined regular expression for valid phone numbers:\n//\nvar VALID_PHONE_NUMBER_PATTERN = new RegExp(\n// Either a short two-digit-only phone number\n'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' +\n// Or a longer fully parsed phone number (min 3 characters)\n'^' + VALID_PHONE_NUMBER +\n// screw phone number extensions\n// '(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\n'$', 'i');\n\n// This consists of the plus symbol, digits, and arabic-indic digits.\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']');\n\n// Regular expression of trailing characters that we want to remove.\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\n\nvar LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+');\n\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGIT_MAPPINGS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n\n\n\t// The maximum length of the country calling code.\n};var MAX_LENGTH_COUNTRY_CODE = 3;\n\n// The minimum length of the national significant number.\nvar MIN_LENGTH_FOR_NSN = 2;\n\n// The ITU says the maximum length should be 15,\n// but one can find longer numbers in Germany.\nvar MAX_LENGTH_FOR_NSN = 17;\n\n// We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\nvar MAX_INPUT_STRING_LENGTH = 250;\n\nvar default_options = {\n\tcountry: {}\n\n\t// `options`:\n\t//  {\n\t//    country:\n\t//    {\n\t//      restrict - (a two-letter country code)\n\t//                 the phone number must be in this country\n\t//\n\t//      default - (a two-letter country code)\n\t//                default country to use for phone number parsing and validation\n\t//                (if no country code could be derived from the phone number)\n\t//    }\n\t//  }\n\t//\n\t// Returns `{ country, number }`\n\t//\n\t// Example use cases:\n\t//\n\t// ```js\n\t// parse('8 (800) 555-35-35', 'RU')\n\t// parse('8 (800) 555-35-35', 'RU', metadata)\n\t// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n\t// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n\t// parse('+7 800 555 35 35')\n\t// parse('+7 800 555 35 35', metadata)\n\t// ```\n\t//\n};export default function parse(first_argument, second_argument, third_argument) {\n\tvar _sort_out_arguments = sort_out_arguments(first_argument, second_argument, third_argument),\n\t    text = _sort_out_arguments.text,\n\t    options = _sort_out_arguments.options,\n\t    metadata = _sort_out_arguments.metadata;\n\n\tif (!options) {\n\t\toptions = _extends({}, default_options);\n\t}\n\n\t// Validate country codes\n\n\t// Validate `default` country\n\tif (options.country.default && !metadata.countries[options.country.default]) {\n\t\tthrow new Error('Unknown country code: ' + options.country.default);\n\t}\n\n\t// Validate `restrict` country\n\tif (options.country.restrict && !metadata.countries[options.country.restrict]) {\n\t\tthrow new Error('Unknown country code: ' + options.country.restrict);\n\t}\n\n\t// Parse the phone number\n\n\tvar formatted_phone_number = extract_formatted_phone_number(text);\n\n\t// If the phone number is not viable, then abort.\n\tif (!is_viable_phone_number(formatted_phone_number)) {\n\t\treturn {};\n\t}\n\n\tvar _parse_phone_number_a = parse_phone_number_and_country_phone_code(formatted_phone_number, metadata),\n\t    country_phone_code = _parse_phone_number_a.country_phone_code,\n\t    number = _parse_phone_number_a.number;\n\n\t// Maybe invalid country phone code encountered\n\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\tvar country = void 0;\n\tvar country_metadata = void 0;\n\n\t// Whether the phone number is formatted as an international phone number\n\tvar is_international = false;\n\n\tif (country_phone_code) {\n\t\tis_international = true;\n\n\t\t// Check country restriction\n\t\tif (options.country.restrict && country_phone_code !== get_phone_code(metadata.countries[options.country.restrict])) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Formatting information for regions which share\n\t\t// a country calling code is contained by only one region\n\t\t// for performance reasons. For example, for NANPA region\n\t\t// (\"North American Numbering Plan Administration\",\n\t\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t\t// it will be contained in the metadata for `US`.\n\t\tcountry_metadata = get_metadata_by_country_phone_code(country_phone_code, metadata);\n\n\t\t// `country` will be set later,\n\t\t// because, for example, for NANPA countries\n\t\t// there are several countries corresponding\n\t\t// to the same `1` country phone code.\n\t\t// Therefore, to reliably determine the exact country,\n\t\t// national (significant) number should be parsed first.\n\t} else if (options.country.restrict || options.country.default) {\n\t\tcountry = options.country.restrict || options.country.default;\n\t\tcountry_metadata = metadata.countries[country];\n\n\t\tnumber = normalize(text);\n\t}\n\n\tif (!country_metadata) {\n\t\treturn {};\n\t}\n\n\tvar national_number = strip_national_prefix(number, country_metadata);\n\n\tvar did_have_national_prefix = national_number !== number;\n\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/67\n\t// if (!is_international && !did_have_national_prefix &&\n\t// \t\tis_national_prefix_required(national_number, country_metadata))\n\t// {\n\t// \treturn {}\n\t// }\n\n\t// Sometimes there are several countries\n\t// corresponding to the same country phone code\n\t// (e.g. NANPA countries all having `1` country phone code).\n\t// Therefore, to reliably determine the exact country,\n\t// national (significant) number should have been parsed first.\n\t//\n\tif (!country) {\n\t\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\n\t\t// get their countries populated with the full set of\n\t\t// \"phone number type\" regular expressions.\n\t\tcountry = find_country_code(country_phone_code, national_number, metadata);\n\n\t\t// Just in case there appears to be a bug in Google's metadata\n\t\t// and the exact country could not be extracted from the phone number.\n\t\t/* istanbul ignore if */\n\t\tif (!country) {\n\t\t\treturn {};\n\t\t}\n\n\t\t// Update metadata to be for this specific country\n\t\tcountry_metadata = metadata.countries[country];\n\t}\n\n\t// Validate national (significant) number length.\n\t//\n\t// A sidenote:\n\t//\n\t// They say that sometimes national (significant) numbers\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n\t// Such numbers will just be discarded.\n\t//\n\tif (national_number.length > MAX_LENGTH_FOR_NSN) {\n\t\treturn {};\n\t}\n\n\t// National number pattern is different for each country,\n\t// even for those ones which are part of the \"NANPA\" group.\n\tvar national_number_rule = new RegExp(get_national_number_pattern(country_metadata));\n\n\t// Check if national phone number pattern matches the number\n\tif (!matches_entirely(national_number, national_number_rule)) {\n\t\treturn {};\n\t}\n\n\treturn { country: country, phone: national_number };\n}\n\n// Normalizes a string of characters representing a phone number.\n// This converts wide-ascii and arabic-indic numerals to European numerals,\n// and strips punctuation and alpha characters.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport function normalize(number) {\n\treturn replace_characters(number, DIGIT_MAPPINGS);\n}\n\n// For any character not being part of `replacements`\n// it is removed from the phone number.\nexport function replace_characters(text, replacements) {\n\tvar replaced = '';\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = _getIterator(text), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar character = _step.value;\n\n\t\t\tvar replacement = replacements[character.toUpperCase()];\n\n\t\t\tif (replacement !== undefined) {\n\t\t\t\treplaced += replacement;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn replaced;\n}\n\n// Checks to see if the string of characters could possibly be a phone number at\n// all. At the moment, checks to see that the string begins with at least 2\n// digits, ignoring any punctuation commonly found in phone numbers. This method\n// does not require the number to be normalized in advance - but does assume\n// that leading non-number symbols have been removed, such as by the method\n// `extract_possible_number`.\n//\nexport function is_viable_phone_number(number) {\n\treturn number.length >= MIN_LENGTH_FOR_NSN && matches_entirely(number, VALID_PHONE_NUMBER_PATTERN);\n}\n\nexport function extract_formatted_phone_number(text) {\n\tif (!text || text.length > MAX_INPUT_STRING_LENGTH) {\n\t\treturn '';\n\t}\n\n\t// Attempt to extract a possible number from the string passed in\n\n\tvar starts_at = text.search(PHONE_NUMBER_START_PATTERN);\n\n\tif (starts_at < 0) {\n\t\treturn '';\n\t}\n\n\treturn text\n\t// Trim everything to the left of the phone number\n\t.slice(starts_at)\n\t// Remove trailing non-numerical characters\n\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n\n// Parses a formatted phone number.\nexport function parse_phone_number(number) {\n\tif (!number) {\n\t\treturn '';\n\t}\n\n\tvar is_international = LEADING_PLUS_CHARS_PATTERN.test(number);\n\n\t// Remove non-digits\n\t// (and strip the possible leading '+')\n\tnumber = normalize(number);\n\n\tif (is_international) {\n\t\treturn '+' + number;\n\t}\n\n\treturn number;\n}\n\n// Parses a formatted phone number\n// and returns `{ country_phone_code, number }`\n// where `number` is the national (significant) phone number.\n//\n// (aka `maybeExtractCountryPhoneCode`)\n//\nexport function parse_phone_number_and_country_phone_code(number, metadata) {\n\tnumber = parse_phone_number(number);\n\n\tif (!number) {\n\t\treturn {};\n\t}\n\n\t// If this is not an international phone number,\n\t// then don't extract country phone code.\n\tif (number[0] !== '+') {\n\t\treturn { number: number };\n\t}\n\n\t// Strip the leading '+' sign\n\tnumber = number.slice(1);\n\n\t// Fast abortion: country codes do not begin with a '0'\n\tif (number[0] === '0') {\n\t\treturn {};\n\t}\n\n\t// The thing with country phone codes\n\t// is that they are orthogonal to each other\n\t// i.e. there's no such country phone code A\n\t// for which country phone code B exists\n\t// where B starts with A.\n\t// Therefore, while scanning digits,\n\t// if a valid country code is found,\n\t// that means that it is the country code.\n\t//\n\tvar i = 1;\n\twhile (i <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n\t\tvar country_phone_code = number.slice(0, i);\n\n\t\tif (metadata.country_phone_code_to_countries[country_phone_code]) {\n\t\t\treturn { country_phone_code: country_phone_code, number: number.slice(i) };\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn {};\n}\n\n// Strips any national prefix (such as 0, 1) present in the number provided\nexport function strip_national_prefix(number, country_metadata) {\n\tvar national_prefix_for_parsing = get_national_prefix_for_parsing(country_metadata);\n\n\tif (!number || !national_prefix_for_parsing) {\n\t\treturn number;\n\t}\n\n\t// Attempt to parse the first digits as a national prefix\n\tvar national_prefix_pattern = new RegExp('^(?:' + national_prefix_for_parsing + ')');\n\tvar national_prefix_matcher = national_prefix_pattern.exec(number);\n\n\t// If no national prefix is present in the phone number,\n\t// but if the national prefix is optional for this country,\n\t// then consider this phone number valid.\n\t//\n\t// Google's reference `libphonenumber` implementation\n\t// wouldn't recognize such phone numbers as valid,\n\t// but I think it would perfectly make sense\n\t// to consider such phone numbers as valid\n\t// because if a national phone number was originally\n\t// formatted without the national prefix\n\t// then it must be parseable back into the original national number.\n\t// In other words, `parse(format(number))`\n\t// must always be equal to `number`.\n\t//\n\tif (!national_prefix_matcher) {\n\t\treturn number;\n\t}\n\n\tvar national_significant_number = void 0;\n\n\t// `national_prefix_for_parsing` capturing groups\n\t// (used only for really messy cases: Argentina, Brazil, Mexico, Somalia)\n\tvar any_groups_were_captured = national_prefix_matcher[national_prefix_matcher.length - 1];\n\tvar national_prefix_transform_rule = get_national_prefix_transform_rule(country_metadata);\n\n\t// If the national number tranformation is needed then do it\n\tif (national_prefix_transform_rule && any_groups_were_captured) {\n\t\tnational_significant_number = number.replace(national_prefix_pattern, national_prefix_transform_rule);\n\t}\n\t// Else, no transformation is necessary,\n\t// and just strip the national prefix.\n\telse {\n\t\t\tnational_significant_number = number.slice(national_prefix_matcher[0].length);\n\t\t}\n\n\t// Verify the parsed national (significant) number for this country\n\tvar national_number_rule = new RegExp(get_national_number_pattern(country_metadata));\n\n\t// If the original number (before stripping national prefix) was viable,\n\t// and the resultant number is not, then prefer the original phone number.\n\t// This is because for some countries (e.g. Russia) the same digit could be both\n\t// a national prefix and a leading digit of a valid national phone number,\n\t// like `8` is the national prefix for Russia and both\n\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n\tif (matches_entirely(number, national_number_rule) && !matches_entirely(national_significant_number, national_number_rule)) {\n\t\treturn number;\n\t}\n\n\t// Return the parsed national (significant) number\n\treturn national_significant_number;\n}\n\nexport function find_country_code(country_phone_code, national_phone_number, metadata) {\n\t// Is always non-empty, because `country_phone_code` is always valid\n\tvar possible_countries = metadata.country_phone_code_to_countries[country_phone_code];\n\n\t// If there's just one country corresponding to the country code,\n\t// then just return it, without further phone number digits validation.\n\tif (possible_countries.length === 1) {\n\t\treturn possible_countries[0];\n\t}\n\n\tvar _iteratorNormalCompletion2 = true;\n\tvar _didIteratorError2 = false;\n\tvar _iteratorError2 = undefined;\n\n\ttry {\n\t\tfor (var _iterator2 = _getIterator(possible_countries), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\tvar country_code = _step2.value;\n\n\t\t\tvar country = metadata.countries[country_code];\n\n\t\t\t// Leading digits check would be the simplest one\n\t\t\tif (get_leading_digits(country)) {\n\t\t\t\tif (national_phone_number && national_phone_number.search(get_leading_digits(country)) === 0) {\n\t\t\t\t\treturn country_code;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Else perform full validation with all of those bulky\n\t\t\t// fixed-line/mobile/etc regular expressions.\n\t\t\telse if (get_number_type({ phone: national_phone_number, country: country_code }, metadata)) {\n\t\t\t\t\treturn country_code;\n\t\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError2 = true;\n\t\t_iteratorError2 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t_iterator2.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError2) {\n\t\t\t\tthrow _iteratorError2;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// export function is_national_prefix_required(national_number, country_metadata)\n// {\n// \tconst format = choose_format_for_number(get_formats(country_metadata), national_number)\n//\n// \tif (format)\n// \t{\n// \t\treturn get_format_national_prefix_is_mandatory_when_formatting(format, country_metadata)\n// \t}\n// }\n\n// Sort out arguments\nfunction sort_out_arguments(first_argument, second_argument, third_argument) {\n\tvar text = void 0;\n\tvar options = void 0;\n\tvar metadata = void 0;\n\n\t// Normalize numerical `value`.\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/142\n\tif (typeof first_argument === 'number') {\n\t\tfirst_argument = String(first_argument);\n\t}\n\n\tif (typeof first_argument === 'string') {\n\t\ttext = first_argument;\n\t}\n\n\t// Covert `resrict` country to an `options` object\n\tif (typeof second_argument === 'string') {\n\t\tvar restrict_to_country = second_argument;\n\n\t\toptions = _extends({}, default_options, {\n\n\t\t\tcountry: {\n\t\t\t\trestrict: restrict_to_country\n\t\t\t}\n\t\t});\n\n\t\tmetadata = third_argument;\n\t} else {\n\t\t// Differentiate `metadata` from `options`\n\t\tif (second_argument && second_argument.countries) {\n\t\t\tmetadata = second_argument;\n\t\t} else {\n\t\t\toptions = second_argument;\n\t\t\tmetadata = third_argument;\n\t\t}\n\t}\n\n\t// Sanity check\n\tif (!metadata) {\n\t\tthrow new Error('Metadata not passed');\n\t}\n\n\treturn { text: text, options: options, metadata: metadata };\n}\n//# sourceMappingURL=parse.js.map","import _getIterator from 'babel-runtime/core-js/get-iterator';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\n// This is an enhanced port of Google Android `libphonenumber`'s\n// `asyoutypeformatter.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\n\nimport { get_phone_code, get_national_prefix, get_national_prefix_for_parsing, get_formats, get_format_pattern, get_format_format as _get_format_format, get_format_international_format, get_format_national_prefix_formatting_rule, get_format_national_prefix_is_mandatory_when_formatting, get_format_leading_digits_patterns, get_format_uses_national_prefix, get_metadata_by_country_phone_code } from './metadata';\n\nimport { VALID_PUNCTUATION, PLUS_CHARS, VALID_DIGITS, extract_formatted_phone_number, parse_phone_number, parse_phone_number_and_country_phone_code, find_country_code, strip_national_prefix } from './parse';\n\nimport { FIRST_GROUP_PATTERN, format_national_number_using_format, local_to_international_style } from './format';\n\nimport { matches_entirely } from './common';\n\n// Used in phone number format template creation.\n// Could be any digit, I guess.\nvar DUMMY_DIGIT = '9';\nvar DUMMY_DIGIT_MATCHER = new RegExp(DUMMY_DIGIT, 'g');\n// I don't know why is it exactly `15`\nvar LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15;\n// Create a phone number consisting only of the digit 9 that matches the\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\nvar LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH);\n\n// The digits that have not been entered yet will be represented by a \\u2008,\n// the punctuation space.\nexport var DIGIT_PLACEHOLDER = 'x'; // '\\u2008' (punctuation space)\nvar DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER);\nvar DIGIT_PLACEHOLDER_MATCHER_GLOBAL = new RegExp(DIGIT_PLACEHOLDER, 'g');\n\n// A pattern that is used to match character classes in regular expressions.\n// An example of a character class is \"[1-4]\".\nvar CHARACTER_CLASS_PATTERN = /\\[([^\\[\\]])*\\]/g;\n\n// Any digit in a regular expression that actually denotes a digit. For\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\n// (8 and 0) are standalone digits, but the rest are not.\n// Two look-aheads are needed because the number following \\\\d could be a\n// two-digit number, since the phone number can be as long as 15 digits.\nvar STANDALONE_DIGIT_PATTERN = /\\d(?=[^,}][^,}])/g;\n\n// A pattern that is used to determine if a `format` is eligible\n// to be used by the \"as you type formatter\".\n// It is eligible when the `format` contains groups of the dollar sign\n// followed by a single digit, separated by valid phone number punctuation.\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\n// getting into the output of the \"as you type formatter\".\nvar ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' + '$');\n\n// This is the minimum length of the leading digits of a phone number\n// to guarantee the first \"leading digits pattern\" for a phone number format\n// to be preemptive.\nvar MIN_LEADING_DIGITS_LENGTH = 3;\n\nvar VALID_INCOMPLETE_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';\n\nvar VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i');\n\nvar as_you_type = function () {\n\tfunction as_you_type(country_code, metadata) {\n\t\t_classCallCheck(this, as_you_type);\n\n\t\t// Sanity check\n\t\tif (!metadata) {\n\t\t\tthrow new Error('Metadata not passed');\n\t\t}\n\n\t\tif (country_code && metadata.countries[country_code]) {\n\t\t\tthis.default_country = country_code;\n\t\t}\n\n\t\tthis.metadata = metadata;\n\n\t\tthis.reset();\n\t}\n\n\t_createClass(as_you_type, [{\n\t\tkey: 'input',\n\t\tvalue: function input(text) {\n\t\t\t// Parse input\n\n\t\t\tvar extracted_number = extract_formatted_phone_number(text);\n\n\t\t\t// Special case for a lone '+' sign\n\t\t\t// since it's not considered a possible phone number.\n\t\t\tif (!extracted_number) {\n\t\t\t\tif (text && text.indexOf('+') >= 0) {\n\t\t\t\t\textracted_number = '+';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Validate possible first part of a phone number\n\t\t\tif (!matches_entirely(extracted_number, VALID_INCOMPLETE_PHONE_NUMBER_PATTERN)) {\n\t\t\t\treturn this.current_output;\n\t\t\t}\n\n\t\t\treturn this.process_input(parse_phone_number(extracted_number));\n\t\t}\n\t}, {\n\t\tkey: 'process_input',\n\t\tvalue: function process_input(input) {\n\t\t\t// If an out of position '+' sign detected\n\t\t\t// (or a second '+' sign),\n\t\t\t// then just drop it from the input.\n\t\t\tif (input[0] === '+') {\n\t\t\t\tif (!this.parsed_input) {\n\t\t\t\t\tthis.parsed_input += '+';\n\n\t\t\t\t\t// If a default country was set\n\t\t\t\t\t// then reset it because an explicitly international\n\t\t\t\t\t// phone number is being entered\n\t\t\t\t\tthis.reset_countriness();\n\t\t\t\t}\n\n\t\t\t\tinput = input.slice(1);\n\t\t\t}\n\n\t\t\t// Raw phone number\n\t\t\tthis.parsed_input += input;\n\n\t\t\t// // Reset phone number validation state\n\t\t\t// this.valid = false\n\n\t\t\t// Add digits to the national number\n\t\t\tthis.national_number += input;\n\n\t\t\t// Try to format the parsed input\n\n\t\t\tif (this.is_international()) {\n\t\t\t\tif (!this.country_phone_code) {\n\t\t\t\t\t// If one looks at country phone codes\n\t\t\t\t\t// then he can notice that no one country phone code\n\t\t\t\t\t// is ever a (leftmost) substring of another country phone code.\n\t\t\t\t\t// So if a valid country code is extracted so far\n\t\t\t\t\t// then it means that this is the country code.\n\n\t\t\t\t\t// If no country phone code could be extracted so far,\n\t\t\t\t\t// then just return the raw phone number,\n\t\t\t\t\t// because it has no way of knowing\n\t\t\t\t\t// how to format the phone number so far.\n\t\t\t\t\tif (!this.extract_country_phone_code()) {\n\t\t\t\t\t\t// Return raw phone number\n\t\t\t\t\t\treturn this.parsed_input;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Initialize country-specific data\n\t\t\t\t\tthis.initialize_phone_number_formats_for_this_country_phone_code();\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t}\n\t\t\t\t// `this.country` could be `undefined`,\n\t\t\t\t// for instance, when there is ambiguity\n\t\t\t\t// in a form of several different countries\n\t\t\t\t// each corresponding to the same country phone code\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc),\n\t\t\t\t// and there's not enough digits entered\n\t\t\t\t// to reliably determine the country\n\t\t\t\t// the phone number belongs to.\n\t\t\t\t// Therefore, in cases of such ambiguity,\n\t\t\t\t// each time something is input,\n\t\t\t\t// try to determine the country\n\t\t\t\t// (if it's not determined yet).\n\t\t\t\telse if (!this.country) {\n\t\t\t\t\t\tthis.determine_the_country();\n\t\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Some national prefixes are substrings of other national prefixes\n\t\t\t\t// (for the same country), therefore try to extract national prefix each time\n\t\t\t\t// because a longer national prefix might be available at some point in time.\n\n\t\t\t\tvar previous_national_prefix = this.national_prefix;\n\t\t\t\tthis.national_number = this.national_prefix + this.national_number;\n\n\t\t\t\t// Possibly extract a national prefix\n\t\t\t\tthis.extract_national_prefix();\n\n\t\t\t\tif (this.national_prefix !== previous_national_prefix) {\n\t\t\t\t\t// National number has changed\n\t\t\t\t\t// (due to another national prefix been extracted)\n\t\t\t\t\t// therefore national number has changed\n\t\t\t\t\t// therefore reset all previous formatting data.\n\t\t\t\t\t// (and leading digits matching state)\n\t\t\t\t\tthis.matching_formats = this.available_formats;\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!this.should_format()) {\n\t\t\t\treturn this.format_as_non_formatted_number();\n\t\t\t}\n\n\t\t\t// Check the available phone number formats\n\t\t\t// based on the currently available leading digits.\n\t\t\tthis.match_formats_by_leading_digits();\n\n\t\t\t// Format the phone number (given the next digits)\n\t\t\tvar formatted_national_phone_number = this.format_national_phone_number(input);\n\n\t\t\t// If the phone number could be formatted,\n\t\t\t// then return it, possibly prepending with country phone code\n\t\t\t// (for international phone numbers only)\n\t\t\tif (formatted_national_phone_number) {\n\t\t\t\treturn this.full_phone_number(formatted_national_phone_number);\n\t\t\t}\n\n\t\t\t// If the phone number couldn't be formatted,\n\t\t\t// then just fall back to the raw phone number.\n\t\t\treturn this.parsed_input;\n\t\t}\n\t}, {\n\t\tkey: 'format_as_non_formatted_number',\n\t\tvalue: function format_as_non_formatted_number() {\n\t\t\tif (this.is_international() && this.country_phone_code) {\n\t\t\t\tif (this.national_number) {\n\t\t\t\t\t// For convenience, the public `.template` property\n\t\t\t\t\t// contains the whole international number\n\t\t\t\t\t// if the phone number being input is international:\n\t\t\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t\t\t// a spacebar and then the template for the national number digits.\n\t\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.country_phone_code.length) + ' ' + repeat(DIGIT_PLACEHOLDER, this.national_number.length);\n\n\t\t\t\t\treturn '+' + this.country_phone_code + ' ' + this.national_number;\n\t\t\t\t}\n\n\t\t\t\treturn '+' + this.country_phone_code;\n\t\t\t}\n\n\t\t\treturn this.parsed_input;\n\t\t}\n\t}, {\n\t\tkey: 'format_national_phone_number',\n\t\tvalue: function format_national_phone_number(next_digits) {\n\t\t\t// Format the next phone number digits\n\t\t\t// using the previously chosen phone number format.\n\t\t\t//\n\t\t\t// This is done here because if `attempt_to_format_complete_phone_number`\n\t\t\t// was placed before this call then the `template`\n\t\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\n\t\t\t//\n\t\t\tvar national_number_formatted_with_previous_format = void 0;\n\t\t\tif (this.chosen_format) {\n\t\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits);\n\t\t\t}\n\n\t\t\t// See if the input digits can be formatted properly already. If not,\n\t\t\t// use the results from format_next_national_number_digits(), which does formatting\n\t\t\t// based on the formatting pattern chosen.\n\n\t\t\tvar formatted_number = this.attempt_to_format_complete_phone_number();\n\n\t\t\t// Just because a phone number doesn't have a suitable format\n\t\t\t// that doesn't mean that the phone is invalid\n\t\t\t// because phone number formats only format phone numbers,\n\t\t\t// they don't validate them and some (rare) phone numbers\n\t\t\t// are meant to stay non-formatted.\n\t\t\tif (formatted_number) {\n\t\t\t\t// if (this.country)\n\t\t\t\t// {\n\t\t\t\t// \tthis.valid = true\n\t\t\t\t// }\n\n\t\t\t\treturn formatted_number;\n\t\t\t}\n\n\t\t\t// For some phone number formats national prefix\n\n\t\t\t// If the previously chosen phone number format\n\t\t\t// didn't match the next (current) digit being input\n\t\t\t// (leading digits pattern didn't match).\n\t\t\tif (this.choose_another_format()) {\n\t\t\t\t// And a more appropriate phone number format\n\t\t\t\t// has been chosen for these `leading digits`,\n\t\t\t\t// then format the national phone number (so far)\n\t\t\t\t// using the newly selected phone number pattern.\n\n\t\t\t\t// Will return `undefined` if it couldn't format\n\t\t\t\t// the supplied national number\n\t\t\t\t// using the selected phone number pattern.\n\n\t\t\t\treturn this.reformat_national_number();\n\t\t\t}\n\n\t\t\t// If could format the next (current) digit\n\t\t\t// using the previously chosen phone number format\n\t\t\t// then return the formatted number so far.\n\n\t\t\t// If no new phone number format could be chosen,\n\t\t\t// and couldn't format the supplied national number\n\t\t\t// using the selected phone number pattern,\n\t\t\t// then it will return `undefined`.\n\n\t\t\treturn national_number_formatted_with_previous_format;\n\t\t}\n\t}, {\n\t\tkey: 'reset',\n\t\tvalue: function reset() {\n\t\t\t// Input stripped of non-phone-number characters.\n\t\t\t// Can only contain a possible leading '+' sign and digits.\n\t\t\tthis.parsed_input = '';\n\n\t\t\tthis.current_output = '';\n\n\t\t\t// This contains the national prefix that has been extracted. It contains only\n\t\t\t// digits without formatting.\n\t\t\tthis.national_prefix = '';\n\n\t\t\tthis.national_number = '';\n\n\t\t\tthis.reset_countriness();\n\n\t\t\tthis.reset_format();\n\n\t\t\t// this.valid = false\n\n\t\t\treturn this;\n\t\t}\n\t}, {\n\t\tkey: 'reset_country',\n\t\tvalue: function reset_country() {\n\t\t\tif (this.default_country && !this.is_international()) {\n\t\t\t\tthis.country = this.default_country;\n\t\t\t} else {\n\t\t\t\tthis.country = undefined;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_countriness',\n\t\tvalue: function reset_countriness() {\n\t\t\tthis.reset_country();\n\n\t\t\tif (this.default_country && !this.is_international()) {\n\t\t\t\tthis.country_metadata = this.metadata.countries[this.default_country];\n\t\t\t\tthis.country_phone_code = get_phone_code(this.country_metadata);\n\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_phone_code();\n\t\t\t} else {\n\t\t\t\tthis.country_metadata = undefined;\n\t\t\t\tthis.country_phone_code = undefined;\n\n\t\t\t\tthis.available_formats = [];\n\t\t\t\tthis.matching_formats = this.available_formats;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'reset_format',\n\t\tvalue: function reset_format() {\n\t\t\tthis.chosen_format = undefined;\n\t\t\tthis.template = undefined;\n\t\t\tthis.partially_populated_template = undefined;\n\t\t\tthis.last_match_position = -1;\n\t\t}\n\n\t\t// Format each digit of national phone number (so far)\n\t\t// using the newly selected phone number pattern.\n\n\t}, {\n\t\tkey: 'reformat_national_number',\n\t\tvalue: function reformat_national_number() {\n\t\t\t// Format each digit of national phone number (so far)\n\t\t\t// using the selected phone number pattern.\n\t\t\treturn this.format_next_national_number_digits(this.national_number);\n\t\t}\n\t}, {\n\t\tkey: 'initialize_phone_number_formats_for_this_country_phone_code',\n\t\tvalue: function initialize_phone_number_formats_for_this_country_phone_code() {\n\t\t\t// Get all \"eligible\" phone number formats for this country\n\t\t\tthis.available_formats = get_formats(this.country_metadata).filter(function (format) {\n\t\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(get_format_international_format(format));\n\t\t\t});\n\n\t\t\tthis.matching_formats = this.available_formats;\n\t\t}\n\t}, {\n\t\tkey: 'match_formats_by_leading_digits',\n\t\tvalue: function match_formats_by_leading_digits() {\n\t\t\tvar leading_digits = this.national_number;\n\n\t\t\t// \"leading digits\" patterns start with a maximum of 3 digits,\n\t\t\t// and then with each additional digit\n\t\t\t// a more precise \"leading digits\" pattern is specified.\n\n\t\t\tvar index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH;\n\n\t\t\tif (index_of_leading_digits_pattern < 0) {\n\t\t\t\tindex_of_leading_digits_pattern = 0;\n\t\t\t}\n\n\t\t\tthis.matching_formats = this.matching_formats.filter(function (format) {\n\t\t\t\tvar leading_digits_pattern_count = get_format_leading_digits_patterns(format).length;\n\n\t\t\t\t// Keep everything that isn't restricted by leading digits.\n\t\t\t\tif (leading_digits_pattern_count === 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tvar leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_pattern_count - 1);\n\t\t\t\tvar leading_digits_pattern = get_format_leading_digits_patterns(format)[leading_digits_pattern_index];\n\n\t\t\t\t// Brackets are required for `^` to be applied to\n\t\t\t\t// all or-ed (`|`) parts, not just the first one.\n\t\t\t\treturn new RegExp('^(' + leading_digits_pattern + ')').test(leading_digits);\n\t\t\t});\n\n\t\t\t// If there was a phone number format chosen\n\t\t\t// and it no longer holds given the new leading digits then reset it\n\t\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1) {\n\t\t\t\tthis.reset_format();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'should_format',\n\t\tvalue: function should_format() {\n\t\t\t// Start matching any formats at all when the national number\n\t\t\t// entered so far is at least 3 digits long,\n\t\t\t// otherwise format matching would give false negatives\n\t\t\t// like when the digits entered so far are `2`\n\t\t\t// and the leading digits pattern is `21` –\n\t\t\t// it's quite obvious in this case that the format could be the one\n\t\t\t// but due to the absence of further digits it would give false negative.\n\t\t\t//\n\t\t\t// Google could have provided leading digits patterns starting\n\t\t\t// with a single digit but they chose not to (for whatever reasons).\n\t\t\t//\n\t\t\treturn this.national_number >= MIN_LEADING_DIGITS_LENGTH;\n\t\t}\n\n\t\t// Check to see if there is an exact pattern match for these digits. If so, we\n\t\t// should use this instead of any other formatting template whose\n\t\t// leadingDigitsPattern also matches the input.\n\n\t}, {\n\t\tkey: 'attempt_to_format_complete_phone_number',\n\t\tvalue: function attempt_to_format_complete_phone_number() {\n\t\t\tvar _iteratorNormalCompletion = true;\n\t\t\tvar _didIteratorError = false;\n\t\t\tvar _iteratorError = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator = _getIterator(this.matching_formats), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\t\tvar format = _step.value;\n\n\t\t\t\t\tvar matcher = new RegExp('^(?:' + get_format_pattern(format) + ')$');\n\n\t\t\t\t\tif (!matcher.test(this.national_number)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.validate_format(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// To leave the formatter in a consistent state\n\t\t\t\t\tthis.reset_format();\n\t\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\t\tvar formatted_number = format_national_number_using_format(this.national_number, format, this.is_international(), this.national_prefix.length > 0, this.country_metadata);\n\n\t\t\t\t\t// Set `this.template` and `this.partially_populated_template`.\n\t\t\t\t\t//\n\t\t\t\t\t// `else` case doesn't ever happen\n\t\t\t\t\t// with the current metadata,\n\t\t\t\t\t// but just in case.\n\t\t\t\t\t//\n\t\t\t\t\t/* istanbul ignore else */\n\t\t\t\t\tif (this.create_formatting_template(format)) {\n\t\t\t\t\t\t// Populate `this.partially_populated_template`\n\t\t\t\t\t\tthis.reformat_national_number();\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\n\t\t\t\t\t\tvar full_number = this.full_phone_number(formatted_number);\n\t\t\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER);\n\t\t\t\t\t\tthis.partially_populated_template = full_number;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn formatted_number;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError = true;\n\t\t\t\t_iteratorError = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t\t_iterator.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Prepends `+CountryCode` in case of an international phone number\n\n\t}, {\n\t\tkey: 'full_phone_number',\n\t\tvalue: function full_phone_number(formatted_national_number) {\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn '+' + this.country_phone_code + ' ' + formatted_national_number;\n\t\t\t}\n\n\t\t\treturn formatted_national_number;\n\t\t}\n\n\t\t// Extracts the country calling code from the beginning\n\t\t// of the entered `national_number` (so far),\n\t\t// and places the remaining input into the `national_number`.\n\n\t}, {\n\t\tkey: 'extract_country_phone_code',\n\t\tvalue: function extract_country_phone_code() {\n\t\t\tif (!this.national_number) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar _parse_phone_number_a = parse_phone_number_and_country_phone_code(this.parsed_input, this.metadata),\n\t\t\t    country_phone_code = _parse_phone_number_a.country_phone_code,\n\t\t\t    number = _parse_phone_number_a.number;\n\n\t\t\tif (!country_phone_code) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.country_phone_code = country_phone_code;\n\t\t\tthis.national_number = number;\n\n\t\t\treturn this.country_metadata = get_metadata_by_country_phone_code(country_phone_code, this.metadata);\n\t\t}\n\t}, {\n\t\tkey: 'extract_national_prefix',\n\t\tvalue: function extract_national_prefix() {\n\t\t\tthis.national_prefix = '';\n\n\t\t\tif (!this.country_metadata) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar national_number = strip_national_prefix(this.national_number, this.country_metadata);\n\n\t\t\tif (national_number !== this.national_number) {\n\t\t\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - national_number.length);\n\t\t\t\tthis.national_number = national_number;\n\t\t\t}\n\n\t\t\treturn this.national_prefix;\n\t\t}\n\t}, {\n\t\tkey: 'choose_another_format',\n\t\tvalue: function choose_another_format() {\n\t\t\t// When there are multiple available formats, the formatter uses the first\n\t\t\t// format where a formatting template could be created.\n\t\t\tvar _iteratorNormalCompletion2 = true;\n\t\t\tvar _didIteratorError2 = false;\n\t\t\tvar _iteratorError2 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator2 = _getIterator(this.matching_formats), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\t\tvar format = _step2.value;\n\n\t\t\t\t\t// If this format is currently being used\n\t\t\t\t\t// and is still possible, then stick to it.\n\t\t\t\t\tif (this.chosen_format === format) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If this `format` is suitable for \"as you type\",\n\t\t\t\t\t// then extract the template from this format\n\t\t\t\t\t// and use it to format the phone number being input.\n\n\t\t\t\t\tif (!this.validate_format(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.create_formatting_template(format)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.chosen_format = format;\n\n\t\t\t\t\t// With a new formatting template, the matched position\n\t\t\t\t\t// using the old template needs to be reset.\n\t\t\t\t\tthis.last_match_position = -1;\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\t// No format matches the phone number,\n\t\t\t\t// therefore set `country` to `undefined`\n\t\t\t\t// (or to the default country).\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError2 = true;\n\t\t\t\t_iteratorError2 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t\t_iterator2.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.reset_country();\n\n\t\t\t// No format matches the national phone number entered\n\t\t\tthis.reset_format();\n\t\t}\n\t}, {\n\t\tkey: 'validate_format',\n\t\tvalue: function validate_format(format) {\n\t\t\t// If national prefix is mandatory for this phone number format\n\t\t\t// and the user didn't input the national prefix,\n\t\t\t// then this phone number format isn't suitable.\n\t\t\tif (!this.is_international() && !this.national_prefix && get_format_national_prefix_is_mandatory_when_formatting(format, this.country_metadata)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}, {\n\t\tkey: 'create_formatting_template',\n\t\tvalue: function create_formatting_template(format) {\n\t\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\n\t\t\t// (20|3)\\d{4}. In those cases we quickly return.\n\t\t\t// (Though there's no such format in current metadata)\n\t\t\t/* istanbul ignore if */\n\t\t\tif (get_format_pattern(format).indexOf('|') >= 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get formatting template for this phone number format\n\t\t\tvar template = this.get_template_for_phone_number_format_pattern(format);\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (!template) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// This one is for national number only\n\t\t\tthis.partially_populated_template = template;\n\n\t\t\t// For convenience, the public `.template` property\n\t\t\t// contains the whole international number\n\t\t\t// if the phone number being input is international:\n\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\n\t\t\t// a spacebar and then the template for the formatted national number.\n\t\t\tif (this.is_international()) {\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.country_phone_code.length) + ' ' + template;\n\t\t\t}\n\t\t\t// For local numbers, replace national prefix\n\t\t\t// with a digit placeholder.\n\t\t\telse {\n\t\t\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER);\n\t\t\t\t}\n\n\t\t\t// This one is for the full phone number\n\t\t\treturn this.template;\n\t\t}\n\n\t\t// Generates formatting template for a phone number format\n\n\t}, {\n\t\tkey: 'get_template_for_phone_number_format_pattern',\n\t\tvalue: function get_template_for_phone_number_format_pattern(format) {\n\t\t\tvar national_prefix_formatting_rule = get_format_national_prefix_formatting_rule(format, this.country_metadata);\n\n\t\t\t// A very smart trick by the guys at Google\n\t\t\tvar number_pattern = get_format_pattern(format)\n\t\t\t// Replace anything in the form of [..] with \\d\n\t\t\t.replace(CHARACTER_CLASS_PATTERN, '\\\\d')\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\n\t\t\t.replace(STANDALONE_DIGIT_PATTERN, '\\\\d');\n\n\t\t\t// This match will always succeed,\n\t\t\t// because the \"longest dummy phone number\"\n\t\t\t// has enough length to accomodate any possible\n\t\t\t// national phone number format pattern.\n\t\t\tvar dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0];\n\n\t\t\t// If the national number entered is too long\n\t\t\t// for any phone number format, then abort.\n\t\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Prepare the phone number format\n\t\t\tvar number_format = this.get_format_format(format, national_prefix_formatting_rule);\n\n\t\t\t// Get a formatting template which can be used to efficiently format\n\t\t\t// a partial number where digits are added one by one.\n\n\t\t\t// Below `strict_pattern` is used for the\n\t\t\t// regular expression (with `^` and `$`).\n\t\t\t// This wasn't originally in Google's `libphonenumber`\n\t\t\t// and I guess they don't really need it\n\t\t\t// because they're not using \"templates\" to format phone numbers\n\t\t\t// but I added `strict_pattern` after encountering\n\t\t\t// South Korean phone number formatting bug.\n\t\t\t//\n\t\t\t// Non-strict regular expression bug demonstration:\n\t\t\t//\n\t\t\t// this.national_number : `111111111` (9 digits)\n\t\t\t//\n\t\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\n\t\t\t// number_format : `$1 $2 $3`\n\t\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\n\t\t\t//\n\t\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\n\t\t\t//\n\t\t\t// template : xx xxxx xxxx\n\t\t\t//\n\t\t\t// But the correct template in this case is `xx xxx xxxx`.\n\t\t\t// The template was generated incorrectly because of the\n\t\t\t// `{3,4}` variability in the `number_pattern`.\n\t\t\t//\n\t\t\t// The fix is, if `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\n\t\t\tvar strict_pattern = new RegExp('^' + number_pattern + '$');\n\t\t\tvar national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT);\n\n\t\t\t// If `this.national_number` has already sufficient length\n\t\t\t// to satisfy the `number_pattern` completely then use it\n\t\t\t// instead of `dummy_phone_number_matching_format_pattern`.\n\t\t\tif (strict_pattern.test(national_number_dummy_digits)) {\n\t\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits;\n\t\t\t}\n\n\t\t\t// Generate formatting template for this phone number format\n\t\t\treturn dummy_phone_number_matching_format_pattern\n\t\t\t// Format the dummy phone number according to the format\n\t\t\t.replace(new RegExp(number_pattern), number_format)\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\n\t\t\t.replace(DUMMY_DIGIT_MATCHER, DIGIT_PLACEHOLDER);\n\t\t}\n\t}, {\n\t\tkey: 'format_next_national_number_digits',\n\t\tvalue: function format_next_national_number_digits(digits) {\n\t\t\tvar _iteratorNormalCompletion3 = true;\n\t\t\tvar _didIteratorError3 = false;\n\t\t\tvar _iteratorError3 = undefined;\n\n\t\t\ttry {\n\t\t\t\tfor (var _iterator3 = _getIterator(digits), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\t\tvar digit = _step3.value;\n\n\t\t\t\t\t// If there is room for more digits in current `template`,\n\t\t\t\t\t// then set the next digit in the `template`,\n\t\t\t\t\t// and return the formatted digits so far.\n\n\t\t\t\t\t// If more digits are entered than the current format could handle\n\t\t\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1) {\n\t\t\t\t\t\t// Reset the current format,\n\t\t\t\t\t\t// so that the new format will be chosen\n\t\t\t\t\t\t// in a subsequent `this.choose_another_format()` call\n\t\t\t\t\t\t// later in code.\n\t\t\t\t\t\tthis.chosen_format = undefined;\n\t\t\t\t\t\tthis.template = undefined;\n\t\t\t\t\t\tthis.partially_populated_template = undefined;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER);\n\t\t\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);\n\t\t\t\t}\n\n\t\t\t\t// Return the formatted phone number so far\n\t\t\t} catch (err) {\n\t\t\t\t_didIteratorError3 = true;\n\t\t\t\t_iteratorError3 = err;\n\t\t\t} finally {\n\t\t\t\ttry {\n\t\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t\t_iterator3.return();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn close_dangling_braces(this.partially_populated_template, this.last_match_position + 1).replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ');\n\t\t}\n\t}, {\n\t\tkey: 'is_international',\n\t\tvalue: function is_international() {\n\t\t\treturn this.parsed_input && this.parsed_input[0] === '+';\n\t\t}\n\t}, {\n\t\tkey: 'get_format_format',\n\t\tvalue: function get_format_format(format, national_prefix_formatting_rule) {\n\t\t\tvar number_format = this.is_international() ? get_format_international_format(format) : _get_format_format(format);\n\n\t\t\t// If national prefix formatting rule is set\n\t\t\t// for this phone number format\n\t\t\tif (national_prefix_formatting_rule) {\n\t\t\t\t// If the user did input the national prefix\n\t\t\t\t// (or if the national prefix formatting rule does not require national prefix)\n\t\t\t\t// then maybe make it part of the phone number template\n\t\t\t\tif (this.national_prefix || !get_format_uses_national_prefix(national_prefix_formatting_rule)) {\n\t\t\t\t\t// Make the national prefix part of the phone number template\n\t\t\t\t\tnumber_format = number_format.replace(FIRST_GROUP_PATTERN, national_prefix_formatting_rule);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.is_international()) {\n\t\t\t\treturn local_to_international_style(number_format);\n\t\t\t}\n\n\t\t\treturn number_format;\n\t\t}\n\n\t\t// Determines the country of the phone number\n\t\t// entered so far based on the country phone code\n\t\t// and the national phone number.\n\n\t}, {\n\t\tkey: 'determine_the_country',\n\t\tvalue: function determine_the_country() {\n\t\t\tthis.country = find_country_code(this.country_phone_code, this.national_number, this.metadata);\n\t\t}\n\t}]);\n\n\treturn as_you_type;\n}();\n\nexport default as_you_type;\n\n\nexport function close_dangling_braces(template, cut_before) {\n\tvar retained_template = template.slice(0, cut_before);\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\t\tcut_before++;\n\t}\n\n\treturn template.slice(0, cut_before);\n}\n\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\tvar _iteratorNormalCompletion4 = true;\n\tvar _didIteratorError4 = false;\n\tvar _iteratorError4 = undefined;\n\n\ttry {\n\t\tfor (var _iterator4 = _getIterator(string), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\tvar character = _step4.value;\n\n\t\t\tif (character === symbol) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError4 = true;\n\t\t_iteratorError4 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t_iterator4.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError4) {\n\t\t\t\tthrow _iteratorError4;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}\n\n// Repeats a string (or a symbol) N times.\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\nexport function repeat(string, times) {\n\tif (times < 1) {\n\t\treturn '';\n\t}\n\n\tvar result = '';\n\n\twhile (times > 1) {\n\t\tif (times & 1) {\n\t\t\tresult += string;\n\t\t}\n\n\t\ttimes >>= 1;\n\t\tstring += string;\n\t}\n\n\treturn result + string;\n}\n//# sourceMappingURL=as you type.js.map","import metadata from './metadata.min.json'\r\n\r\nimport parseCustom from './es6/parse'\r\nimport getNumberTypeCustom from './es6/get number type'\r\nimport formatCustom from './es6/format'\r\nimport isValidNumberCustom from './es6/validate'\r\nimport asYouTypeCustom from './es6/as you type'\r\n\r\nimport { get_phone_code } from './es6/metadata'\r\n\r\nexport function parse()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn parseCustom.apply(this, parameters)\r\n}\r\n\r\nexport function format()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn formatCustom.apply(this, parameters)\r\n}\r\n\r\nexport function get_number_type()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn getNumberTypeCustom.apply(this, parameters)\r\n}\r\n\r\n// camelCase alias\r\nexport function getNumberType()\r\n{\r\n\treturn get_number_type.apply(this, arguments)\r\n}\r\n\r\nexport function is_valid_number()\r\n{\r\n\tvar parameters = Array.prototype.slice.call(arguments)\r\n\tparameters.push(metadata)\r\n\treturn isValidNumberCustom.apply(this, parameters)\r\n}\r\n\r\n// camelCase alias\r\nexport function isValidNumber()\r\n{\r\n\treturn is_valid_number.apply(this, arguments)\r\n}\r\n\r\nexport function as_you_type(country)\r\n{\r\n\tasYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nas_you_type.prototype = Object.create(asYouTypeCustom.prototype, {})\r\nas_you_type.prototype.constructor = as_you_type\r\n\r\n// camelCase alias\r\n\r\nexport function asYouType(country)\r\n{\r\n\tasYouTypeCustom.call(this, country, metadata)\r\n}\r\n\r\nasYouType.prototype = Object.create(asYouTypeCustom.prototype, {})\r\nasYouType.prototype.constructor = asYouType\r\n\r\nexport\r\n{\r\n\tdefault as parseCustom,\r\n\tDIGIT_MAPPINGS as DIGITS\r\n}\r\nfrom './es6/parse'\r\n\r\nexport { default as formatCustom }        from './es6/format'\r\nexport { default as isValidNumberCustom } from './es6/validate'\r\nexport { default as getNumberTypeCustom } from './es6/get number type'\r\n\r\nexport\r\n{\r\n\tdefault as asYouTypeCustom,\r\n\tDIGIT_PLACEHOLDER\r\n}\r\nfrom './es6/as you type'\r\n\r\nexport function getPhoneCode(country)\r\n{\r\n\treturn getPhoneCodeCustom(country, metadata)\r\n}\r\n\r\nexport function getPhoneCodeCustom(country, metadata)\r\n{\r\n\tif (!metadata.countries[country])\r\n\t{\r\n\t\tthrow new Error('Unknown country: \"' + country + '\"')\r\n\t}\r\n\r\n\treturn get_phone_code(metadata.countries[country])\r\n}","import parse, { is_viable_phone_number } from './parse';\nimport get_number_type, { sort_out_arguments } from './get number type';\n\nimport { get_types } from './metadata';\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(first_argument, second_argument, third_argument) {\n\tvar _sort_out_arguments = sort_out_arguments(first_argument, second_argument, third_argument),\n\t    input = _sort_out_arguments.input,\n\t    metadata = _sort_out_arguments.metadata;\n\n\t// Sanity check\n\n\n\tif (!metadata) {\n\t\tthrow new Error('Metadata not passed');\n\t}\n\n\tif (!input) {\n\t\treturn false;\n\t}\n\n\tif (!input.country) {\n\t\treturn false;\n\t}\n\n\tvar country_metadata = metadata.countries[input.country];\n\n\tif (get_types(country_metadata)) {\n\t\tif (!get_number_type(input, metadata)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n//# sourceMappingURL=validate.js.map","import _getIterator from \"babel-runtime/core-js/get-iterator\";\n// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n\tvar count = 0;\n\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = _getIterator(string), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar character = _step.value;\n\n\t\t\tif (character === symbol) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn count;\n}\n//# sourceMappingURL=helpers.js.map","import _getIterator from 'babel-runtime/core-js/get-iterator';\nimport { count_occurences } from './helpers';\nimport close_braces from './close braces';\n\n// Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\nexport default function template_formatter(template) {\n\tvar placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n\tvar should_close_braces = arguments[2];\n\n\tif (!template) {\n\t\treturn function (value) {\n\t\t\treturn { text: value };\n\t\t};\n\t}\n\n\tvar characters_in_template = count_occurences(placeholder, template);\n\n\treturn function (value) {\n\t\tif (!value) {\n\t\t\treturn { text: '', template: template };\n\t\t}\n\n\t\tvar value_character_index = 0;\n\t\tvar filled_in_template = '';\n\n\t\tvar _iteratorNormalCompletion = true;\n\t\tvar _didIteratorError = false;\n\t\tvar _iteratorError = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator = _getIterator(template), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\t\tvar character = _step.value;\n\n\t\t\t\tif (character !== placeholder) {\n\t\t\t\t\tfilled_in_template += character;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfilled_in_template += value[value_character_index];\n\t\t\t\tvalue_character_index++;\n\n\t\t\t\t// If the last available value character has been filled in,\n\t\t\t\t// then return the filled in template\n\t\t\t\t// (either trim the right part or retain it,\n\t\t\t\t//  if no more character placeholders in there)\n\t\t\t\tif (value_character_index === value.length) {\n\t\t\t\t\t// If there are more character placeholders\n\t\t\t\t\t// in the right part of the template\n\t\t\t\t\t// then simply trim it.\n\t\t\t\t\tif (value.length < characters_in_template) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError = true;\n\t\t\t_iteratorError = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t\t_iterator.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError) {\n\t\t\t\t\tthrow _iteratorError;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (should_close_braces) {\n\t\t\tfilled_in_template = close_braces(filled_in_template, template);\n\t\t}\n\n\t\treturn { text: filled_in_template, template: template };\n\t};\n}\n//# sourceMappingURL=template formatter.js.map","import { count_occurences } from './helpers';\n\nexport default function close_braces(retained_template, template) {\n\tvar placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n\tvar empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n\n\tvar cut_before = retained_template.length;\n\n\tvar opening_braces = count_occurences('(', retained_template);\n\tvar closing_braces = count_occurences(')', retained_template);\n\n\tvar dangling_braces = opening_braces - closing_braces;\n\n\twhile (dangling_braces > 0 && cut_before < template.length) {\n\t\tretained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n\t\tif (template[cut_before] === ')') {\n\t\t\tdangling_braces--;\n\t\t}\n\n\t\tcut_before++;\n\t}\n\n\treturn retained_template;\n}\n//# sourceMappingURL=close braces.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n\tvar value = '';\n\n\tvar focused_input_character_index = 0;\n\n\tvar index = 0;\n\twhile (index < text.length) {\n\t\tvar character = parse_character(text[index], value);\n\n\t\tif (character !== undefined) {\n\t\t\tvalue += character;\n\n\t\t\tif (caret_position !== undefined) {\n\t\t\t\tif (caret_position === index) {\n\t\t\t\t\tfocused_input_character_index = value.length - 1;\n\t\t\t\t} else if (caret_position > index) {\n\t\t\t\t\tfocused_input_character_index = value.length;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tindex++;\n\t}\n\n\t// If caret position wasn't specified\n\tif (caret_position === undefined) {\n\t\t// Then set caret position to \"after the last input character\"\n\t\tfocused_input_character_index = value.length;\n\t}\n\n\tvar result = {\n\t\tvalue: value,\n\t\tcaret: focused_input_character_index\n\t};\n\n\treturn result;\n}\n//# sourceMappingURL=parse.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n\t// If no selection, return nothing\n\tif (element.selectionStart === element.selectionEnd) {\n\t\treturn;\n\t}\n\n\treturn { start: element.selectionStart, end: element.selectionEnd };\n}\n\n// Key codes\nvar Keys = {\n\tBackspace: 8,\n\tDelete: 46\n};\n\n// Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\nexport function getOperation(event) {\n\tswitch (event.keyCode) {\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace';\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete';\n\t}\n}\n\n// Gets <input/> caret position\nexport function getCaretPosition(element) {\n\treturn element.selectionStart;\n}\n\n// Sets <input/> caret position\nexport function setCaretPosition(element, caret_position) {\n\t// Sanity check\n\tif (caret_position === undefined) {\n\t\treturn;\n\t}\n\n\t// Set caret position\n\telement.setSelectionRange(caret_position, caret_position);\n}\n//# sourceMappingURL=dom.js.map","import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport edit from './edit';\nimport parse from './parse';\nimport format from './format';\n\nimport { getSelection, getOperation, getCaretPosition, setCaretPosition } from './dom';\n\nvar Input_controller = function () {\n\tfunction Input_controller(get_input_element, parse, format, on_change) {\n\t\t_classCallCheck(this, Input_controller);\n\n\t\t_initialiseProps.call(this);\n\n\t\tif (typeof get_input_element !== 'function') {\n\t\t\t(function () {\n\t\t\t\tvar element = get_input_element;\n\t\t\t\tget_input_element = function get_input_element() {\n\t\t\t\t\treturn element;\n\t\t\t\t};\n\t\t\t})();\n\t\t}\n\n\t\tthis.get_input_element = get_input_element;\n\t\tthis.parse = parse;\n\t\tthis.format = format;\n\t\tthis.on_change = on_change;\n\t}\n\n\t// Special handling for \"Cut\" event because\n\t// it wouldn't copy to clipboard otherwise.\n\n\n\t// Intercepts \"Delete\" and \"Backspace\" keys\n\t// (hitting \"Delete\" or \"Backspace\"\n\t//  at any caret position should always result in\n\t//  erasing a digit)\n\n\n\t_createClass(Input_controller, [{\n\t\tkey: 'erase_selection',\n\n\n\t\t// Erases the selected text inside an `<input/>`\n\t\tvalue: function erase_selection(input, selection) {\n\t\t\tvar text = input.value;\n\t\t\ttext = text.slice(0, selection.start) + text.slice(selection.end);\n\n\t\t\tinput.value = text;\n\t\t\tsetCaretPosition(input, selection.start);\n\n\t\t\treturn this.format_input_text();\n\t\t}\n\n\t\t// Formats <input/> textual value as a phone number\n\n\t}, {\n\t\tkey: 'getParsedValue',\n\n\n\t\t// Parses `<input/>` text\n\t\tvalue: function getParsedValue() {\n\t\t\t// <input/> DOM element\n\t\t\tvar input = this.get_input_element();\n\n\t\t\treturn parse(input.value, undefined, this.parse);\n\t\t}\n\t}]);\n\n\treturn Input_controller;\n}();\n\nvar _initialiseProps = function _initialiseProps() {\n\tvar _this = this;\n\n\tthis.onCut = function (event) {\n\t\tsetTimeout(_this.format_input_text, 0);\n\t};\n\n\tthis.onPaste = function (event) {\n\t\tvar input = _this.get_input_element();\n\n\t\tvar selection = getSelection(input);\n\n\t\t// If selection is made,\n\t\t// just erase the selected text\n\t\t// prior to pasting\n\t\tif (selection) {\n\t\t\t_this.erase_selection(input, selection);\n\t\t}\n\n\t\t_this.format_input_text();\n\t};\n\n\tthis.onChange = function (event) {\n\t\t_this.format_input_text();\n\t};\n\n\tthis.onKeyDown = function (event) {\n\t\tvar operation = getOperation(event);\n\n\t\tswitch (operation) {\n\t\t\tcase 'Delete':\n\t\t\tcase 'Backspace':\n\t\t\t\t// Intercept this operation and perform it manually.\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\tvar input = _this.get_input_element();\n\n\t\t\t\tvar selection = getSelection(input);\n\n\t\t\t\t// If selection is made,\n\t\t\t\t// just erase the selected text,\n\t\t\t\t// and don't apply any more operations to it.\n\t\t\t\tif (selection) {\n\t\t\t\t\t_this.erase_selection(input, selection);\n\t\t\t\t\treturn _this.format_input_text();\n\t\t\t\t}\n\n\t\t\t\t// Else, perform the (character erasing) operation manually\n\t\t\t\treturn _this.format_input_text(operation);\n\t\t}\n\t};\n\n\tthis.format_input_text = function (operation) {\n\t\t// <input/> DOM element\n\t\tvar input = _this.get_input_element();\n\n\t\tvar _parse = parse(input.value, getCaretPosition(input), _this.parse),\n\t\t    value = _parse.value,\n\t\t    caret = _parse.caret;\n\n\t\t// Apply the pending operation to the <input/> textual value (if any)\n\n\n\t\tif (operation) {\n\t\t\tvar edit_result = edit(value, caret, operation);\n\n\t\t\tvalue = edit_result.value;\n\t\t\tcaret = edit_result.caret;\n\t\t}\n\n\t\t// Format the <input/> textual value as a phone number\n\t\t// (and reposition the caret accordingly)\n\n\t\tvar format_result = format(value, caret, _this.format);\n\n\t\tvar text = format_result.text;\n\t\tcaret = format_result.caret;\n\n\t\t// Set <input/> textual value manually to also set caret position\n\t\t// and prevent React from resetting the caret position later\n\t\t// inside subsequent `render()`.\n\t\t// Doesn't work for custom `inputComponent`s for some reason.\n\t\tinput.value = text;\n\t\t// Set caret position (with the neccessary adjustments)\n\t\tsetCaretPosition(input, caret);\n\n\t\t// <input/> textual value may have been changed,\n\t\t// so `value` may have been changed too.\n\t\t_this.on_change(value);\n\t};\n};\n\nexport default Input_controller;\n//# sourceMappingURL=input controller.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n\tswitch (operation) {\n\t\tcase 'Backspace':\n\t\t\t// If there exists the previous character,\n\t\t\t// then erase it and reposition the caret.\n\t\t\tif (caret > 0) {\n\t\t\t\t// Remove the previous character\n\t\t\t\tvalue = value.slice(0, caret - 1) + value.slice(caret);\n\t\t\t\t// Position the caret where the previous (erased) character was\n\t\t\t\tcaret--;\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Delete':\n\t\t\t// Remove current digit (if any)\n\t\t\tvalue = value.slice(0, caret) + value.slice(caret + 1);\n\t\t\tbreak;\n\t}\n\n\treturn { value: value, caret: caret };\n}\n//# sourceMappingURL=edit.js.map","import template_formatter from './template formatter';\n\n// Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string — a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\nexport default function format(value, caret, formatter) {\n\tif (typeof formatter === 'string') {\n\t\tformatter = template_formatter(formatter);\n\t}\n\n\tvar _ref = formatter(value) || {},\n\t    text = _ref.text,\n\t    template = _ref.template;\n\n\tif (text === undefined) {\n\t\ttext = value;\n\t}\n\n\tif (template) {\n\t\tif (caret === undefined) {\n\t\t\tcaret = text.length;\n\t\t} else {\n\t\t\tvar index = 0;\n\t\t\tvar found = false;\n\n\t\t\tvar possibly_last_input_character_index = -1;\n\n\t\t\twhile (index < text.length && index < template.length) {\n\t\t\t\t// Character placeholder found\n\t\t\t\tif (text[index] !== template[index]) {\n\t\t\t\t\tif (caret === 0) {\n\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\tcaret = index;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tpossibly_last_input_character_index = index;\n\n\t\t\t\t\tcaret--;\n\t\t\t\t}\n\n\t\t\t\tindex++;\n\t\t\t}\n\n\t\t\t// If the caret was positioned after last input character,\n\t\t\t// then the text caret index is just after the last input character.\n\t\t\tif (!found) {\n\t\t\t\tcaret = possibly_last_input_character_index + 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { text: text, caret: caret };\n}\n//# sourceMappingURL=format.js.map","import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport Input_controller from './input controller';\n\n// Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nvar ReactInput = function (_React$Component) {\n\t_inherits(ReactInput, _React$Component);\n\n\tfunction ReactInput(props) {\n\t\t_classCallCheck(this, ReactInput);\n\n\t\tvar _this = _possibleConstructorReturn(this, (ReactInput.__proto__ || _Object$getPrototypeOf(ReactInput)).call(this, props));\n\n\t\t_this.store_instance = function (instance) {\n\t\t\t_this.input = instance;\n\t\t};\n\n\t\t_this.get_input_element = function () {\n\t\t\treturn ReactDOM.findDOMNode(_this.input);\n\t\t};\n\n\t\t_this.on_blur = function (event) {\n\t\t\tvar onBlur = _this.props.onBlur;\n\n\t\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t\t// so that it gets the right (parsed, not the formatted one)\n\t\t\t// `event.target.value` in its `onBlur` handler.\n\n\t\t\tif (onBlur) {\n\t\t\t\tvar _event = _extends({}, event, {\n\t\t\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\t\t\tvalue: _this.input_controller.getParsedValue().value\n\t\t\t\t\t})\n\t\t\t\t});\n\n\t\t\t\t// For `redux-form` event detection.\n\t\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t\t\t_event.stopPropagation = event.stopPropagation;\n\t\t\t\t_event.preventDefault = event.preventDefault;\n\n\t\t\t\tonBlur(_event);\n\t\t\t}\n\t\t};\n\n\t\t_this.on_key_down = function (event) {\n\t\t\tvar onKeyDown = _this.props.onKeyDown;\n\n\n\t\t\tif (onKeyDown) {\n\t\t\t\tonKeyDown(event);\n\t\t\t}\n\n\t\t\t_this.input_controller.onKeyDown(event);\n\t\t};\n\n\t\tvar _this$props = _this.props,\n\t\t    parse = _this$props.parse,\n\t\t    format = _this$props.format,\n\t\t    onChange = _this$props.onChange;\n\n\n\t\t_this.input_controller = new Input_controller(_this.get_input_element, parse, format, onChange);\n\t\treturn _this;\n\t}\n\n\t_createClass(ReactInput, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props = this.props,\n\t\t\t    value = _props.value,\n\t\t\t    parse = _props.parse,\n\t\t\t    format = _props.format,\n\t\t\t    inputComponent = _props.inputComponent,\n\t\t\t    rest = _objectWithoutProperties(_props, ['value', 'parse', 'format', 'inputComponent']);\n\n\t\t\t// Non-string `inputComponent`s would work in this case\n\t\t\t// but it would also introduce a caret reset bug:\n\t\t\t// the caret position would reset on each input.\n\t\t\t// The origins of this bug are unknown, they may be\n\t\t\t// somehow related to the `ref` property\n\t\t\t// being intercepted by React here.\n\n\n\t\t\treturn React.createElement(inputComponent, _extends({}, rest, {\n\t\t\t\tref: this.store_instance,\n\t\t\t\tvalue: format(is_empty(value) ? '' : value).text,\n\t\t\t\tonKeyDown: this.on_key_down,\n\t\t\t\tonChange: this.input_controller.onChange,\n\t\t\t\tonPaste: this.input_controller.onPaste,\n\t\t\t\tonCut: this.input_controller.onCut,\n\t\t\t\tonBlur: this.on_blur\n\t\t\t}));\n\t\t}\n\n\t\t// Returns <input/> DOM Element\n\n\n\t\t// This handler is a workaround for `redux-form`\n\n\t}, {\n\t\tkey: 'focus',\n\t\tvalue: function focus() {\n\t\t\tthis.get_input_element().focus();\n\t\t}\n\t}]);\n\n\treturn ReactInput;\n}(React.Component);\n\nReactInput.propTypes = {\n\t// Parses a single characher of `<input/>` text\n\tparse: PropTypes.func.isRequired,\n\n\t// Formats `value` into `<input/>` text\n\tformat: PropTypes.func.isRequired,\n\n\t// Renders `<input/>` by default\n\tinputComponent: PropTypes.string.isRequired,\n\n\t// `<input/>` `type` attribute\n\ttype: PropTypes.string.isRequired,\n\n\t// Is parsed from <input/> text\n\tvalue: PropTypes.string,\n\n\t// This handler is called each time `<input/>` text is changed\n\tonChange: PropTypes.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted text.\n\tonBlur: PropTypes.func,\n\n\t// Passthrough\n\tonKeyDown: PropTypes.func\n};\nReactInput.defaultProps = {\n\t// Renders `<input/>` by default\n\tinputComponent: 'input',\n\n\t// `<input/>` `type` attribute\n\ttype: 'text'\n};\nexport default ReactInput;\n\n\nfunction is_empty(value) {\n\treturn value === undefined || value === null;\n}\n//# sourceMappingURL=react input.js.map","// Copied from `libphonenumber-js`:\n// https://github.com/catamphetamine/libphonenumber-js/blob/master/source/parse.js\n//\n// These mappings map a character (key) to a specific digit that should\n// replace it for normalization purposes. Non-European digits that\n// may be used in phone numbers are mapped to a European equivalent.\n//\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n//\nexport var DIGITS = {\n\t'0': '0',\n\t'1': '1',\n\t'2': '2',\n\t'3': '3',\n\t'4': '4',\n\t'5': '5',\n\t'6': '6',\n\t'7': '7',\n\t'8': '8',\n\t'9': '9',\n\t'\\uFF10': '0', // Fullwidth digit 0\n\t'\\uFF11': '1', // Fullwidth digit 1\n\t'\\uFF12': '2', // Fullwidth digit 2\n\t'\\uFF13': '3', // Fullwidth digit 3\n\t'\\uFF14': '4', // Fullwidth digit 4\n\t'\\uFF15': '5', // Fullwidth digit 5\n\t'\\uFF16': '6', // Fullwidth digit 6\n\t'\\uFF17': '7', // Fullwidth digit 7\n\t'\\uFF18': '8', // Fullwidth digit 8\n\t'\\uFF19': '9', // Fullwidth digit 9\n\t'\\u0660': '0', // Arabic-indic digit 0\n\t'\\u0661': '1', // Arabic-indic digit 1\n\t'\\u0662': '2', // Arabic-indic digit 2\n\t'\\u0663': '3', // Arabic-indic digit 3\n\t'\\u0664': '4', // Arabic-indic digit 4\n\t'\\u0665': '5', // Arabic-indic digit 5\n\t'\\u0666': '6', // Arabic-indic digit 6\n\t'\\u0667': '7', // Arabic-indic digit 7\n\t'\\u0668': '8', // Arabic-indic digit 8\n\t'\\u0669': '9', // Arabic-indic digit 9\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\n\t'\\u06F9': '9' // Eastern-Arabic digit 9\n};\n\nexport default function (character, value) {\n\treturn DIGITS[character];\n}\n//# sourceMappingURL=parse digit.js.map","import _slicedToArray from 'babel-runtime/helpers/slicedToArray';\nimport _Object$keys from 'babel-runtime/core-js/object/keys';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _getIterator from 'babel-runtime/core-js/get-iterator';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { as_you_type, parse, format, getPhoneCode, DIGITS } from 'libphonenumber-js';\nimport { ReactInput } from 'input-format';\nimport classNames from 'classnames';\n\n// Could have been `import { Select } from 'react-responsive-ui'`\n// but in that case Webpack bundles the whole `react-responsive-ui` package.\nimport Select from 'react-responsive-ui/commonjs/Select';\n\nimport country_names from './countries';\nimport InternationalIcon from './InternationalIcon';\n\n// A list of all country codes\nvar all_countries = [];\n\n// Country code to country name map\nvar default_dictionary = {\n\tInternational: 'International'\n\n\t// Populate `all_countries` and `default_dictionary`\n};var _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n\tfor (var _iterator = _getIterator(country_names), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\tvar item = _step.value;\n\n\t\tvar _item = _slicedToArray(item, 2),\n\t\t    code = _item[0],\n\t\t    name = _item[1];\n\n\t\tall_countries.push(code.toUpperCase());\n\t\tdefault_dictionary[code.toUpperCase()] = name;\n\t}\n\n\t// Default country flag icon\n} catch (err) {\n\t_didIteratorError = true;\n\t_iteratorError = err;\n} finally {\n\ttry {\n\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t_iterator.return();\n\t\t}\n\t} finally {\n\t\tif (_didIteratorError) {\n\t\t\tthrow _iteratorError;\n\t\t}\n\t}\n}\n\nvar FlagComponent = function FlagComponent(_ref) {\n\tvar countryCode = _ref.countryCode,\n\t    flagsPath = _ref.flagsPath;\n\treturn React.createElement('img', {\n\t\talt: countryCode,\n\t\tclassName: 'react-phone-number-input__icon',\n\t\tsrc: '' + flagsPath + countryCode.toLowerCase() + '.svg' });\n};\n\n// Allows passing custom `libphonenumber-js` metadata\n// to reduce the overall bundle size.\n\nvar Input = function (_Component) {\n\t_inherits(Input, _Component);\n\n\tfunction Input(props) {\n\t\t_classCallCheck(this, Input);\n\n\t\tvar _this = _possibleConstructorReturn(this, (Input.__proto__ || _Object$getPrototypeOf(Input)).call(this, props));\n\n\t\t_initialiseProps.call(_this);\n\n\t\tvar _this$props = _this.props,\n\t\t    countries = _this$props.countries,\n\t\t    value = _this$props.value,\n\t\t    dictionary = _this$props.dictionary,\n\t\t    international = _this$props.international,\n\t\t    internationalIcon = _this$props.internationalIcon,\n\t\t    flags = _this$props.flags;\n\t\tvar country = _this.props.country;\n\n\t\t// Normalize `country` code\n\n\t\tcountry = normalize_country_code(country, dictionary);\n\n\t\t// Autodetect country if value is set\n\t\t// and is international (which it should be)\n\t\tif (value && value[0] === '+') {\n\t\t\t// `country` will be left `undefined` in case of non-detection\n\t\t\tcountry = parse(value).country;\n\t\t}\n\n\t\t// If there will be no \"International\" option\n\t\t// then a `country` must be selected.\n\t\tif (!should_add_international_option(_this.props) && !country) {\n\t\t\tcountry = countries[0];\n\t\t}\n\n\t\t// Set the currently selected country\n\t\t_this.state.country_code = country;\n\n\t\t// If a phone number `value` is passed then format it\n\t\tif (value) {\n\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t// which corresponding to `this.state.value`.\n\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t// needs `this.state.value` recalculation.\n\t\t\t_this.state.value_property = value;\n\t\t\t// Set the currently entered `value`.\n\t\t\t// State `value` is either in international plaintext or just plaintext format.\n\t\t\t// (e.g. `+78005553535`, `1234567`)\n\t\t\t_this.state.value = _this.get_input_value_depending_on_the_country_selected(value, country);\n\t\t}\n\n\t\t// `<Select/>` options\n\t\t_this.select_options = [];\n\n\t\t// Whether custom country names are supplied\n\t\tvar using_custom_country_names = false;\n\n\t\t// Add a `<Select/>` option for each country\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = _getIterator(countries), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tvar country_code = _step2.value;\n\n\t\t\t\tif (dictionary[country_code]) {\n\t\t\t\t\tusing_custom_country_names = true;\n\t\t\t\t}\n\n\t\t\t\t_this.select_options.push({\n\t\t\t\t\tvalue: country_code,\n\t\t\t\t\tlabel: dictionary[country_code] || default_dictionary[country_code],\n\t\t\t\t\ticon: get_country_option_icon(country_code, _this.props)\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Sort the list of countries alphabetically\n\t\t\t// (if `String.localeCompare` is available).\n\t\t\t// https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\n\t\t\t// (Which means: IE >= 11, and does not work in Safari as of May 2017)\n\t\t\t//\n\t\t\t// This is only done when custom country names\n\t\t\t// are supplied via `dictionary` property\n\t\t\t// because by default all country names are already sorted.\n\t\t\t//\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (using_custom_country_names && String.prototype.localeCompare) {\n\t\t\t_this.select_options.sort(function (a, b) {\n\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t});\n\t\t}\n\n\t\t// Add the \"International\" option to the country list (if suitable)\n\t\tif (should_add_international_option(_this.props)) {\n\t\t\t_this.select_options.unshift({\n\t\t\t\tlabel: dictionary['International'] || default_dictionary['International'],\n\t\t\t\ticon: flags === false ? undefined : internationalIcon\n\t\t\t});\n\t\t}\n\t\treturn _this;\n\t}\n\n\t// Determines the text `<input/>` `value`\n\t// depending on `this.props.value` and the country selected.\n\t//\n\t// E.g. when a country is selected and `this.props.value`\n\t// is in international format for this country\n\t// then it can be converted to national format\n\t// (if `convertToNational` is `true`).\n\t//\n\n\n\t_createClass(Input, [{\n\t\tkey: 'get_input_value_depending_on_the_country_selected',\n\t\tvalue: function get_input_value_depending_on_the_country_selected(value, country_code) {\n\t\t\tvar _props = this.props,\n\t\t\t    metadata = _props.metadata,\n\t\t\t    convertToNational = _props.convertToNational;\n\n\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the country code is specified\n\t\t\tif (country_code) {\n\t\t\t\t// and the phone is in international format\n\t\t\t\t// and should convert to national phone number\n\t\t\t\tif (value[0] === '+' && convertToNational) {\n\t\t\t\t\t// If it's a fully-entered phone number\n\t\t\t\t\t// that converts into a valid national number for this country\n\t\t\t\t\t// then the value is set to be that national number.\n\n\t\t\t\t\tvar parsed = parse(value, metadata);\n\n\t\t\t\t\tif (parsed.country === country_code) {\n\t\t\t\t\t\tvar input_value = format(parsed.phone, country_code, 'National', metadata);\n\t\t\t\t\t\treturn this.format(input_value, country_code).text;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The country is not set.\n\t\t\t// Must be an international phone number then.\n\t\t\telse if (value[0] !== '+') {\n\t\t\t\t\t// The following causes the caret to move the end of the input field\n\t\t\t\t\t// but it's unlikely any sane person would like to erase the `+` sign\n\t\t\t\t\t// while inputting an international phone number without any country selected.\n\t\t\t\t\treturn '+' + value;\n\t\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\t}, {\n\t\tkey: 'set_country_code_value',\n\t\tvalue: function set_country_code_value(country_code) {\n\t\t\tvar onCountryChange = this.props.onCountryChange;\n\n\n\t\t\tif (onCountryChange) {\n\t\t\t\tonCountryChange(country_code);\n\t\t\t}\n\n\t\t\tthis.setState({ country_code: country_code });\n\t\t}\n\n\t\t// `<select/>` `onChange` handler\n\n\n\t\t// `input-format` `parse` character function\n\t\t// https://github.com/catamphetamine/input-format\n\n\n\t\t// `input-format` `format` function\n\t\t// https://github.com/catamphetamine/input-format\n\n\n\t\t// Returns `true` if the country is available in the list\n\n\n\t\t// Can be called externally\n\n\n\t\t// `<input/>` `onKeyDown` handler\n\n\n\t\t// `<input/>` `onChange` handler.\n\t\t// Updates `this.props.value` (in e.164 phone number format)\n\t\t// according to the new `this.state.value`.\n\t\t// (keeps them in sync)\n\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\t// A developer is not supposed to pass this `onBlur` property manually.\n\t\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t\t// and this component passes this `onBlur` property further to\n\t\t// `input-format`'s `<ReactInput/>` which then modifies this `onBlur` handler\n\t\t// to return the correct parsed `value` so that it all works with `redux-form`.\n\n\n\t\t// When country `<select/>` is toggled\n\n\n\t\t// Focuses the `<input/>` field\n\t\t// on tab out of the country `<select/>`\n\n\t}, {\n\t\tkey: 'can_change_country',\n\n\n\t\t// Can a user change the default country or not.\n\t\tvalue: function can_change_country() {\n\t\t\tvar countries = this.props.countries;\n\n\t\t\t// If `countries` is empty,\n\t\t\t// then only \"International\" option is available,\n\t\t\t// so can't switch it.\n\t\t\t//\n\t\t\t// If `countries` is a single allowed country,\n\t\t\t// then cant's switch it.\n\t\t\t//\n\n\t\t\treturn countries.length > 1;\n\t\t}\n\n\t\t// Listen for default country property:\n\t\t// if it is set after the page loads\n\t\t// and the user hasn't selected a country yet\n\t\t// then select the default country.\n\n\t}, {\n\t\tkey: 'componentWillReceiveProps',\n\t\tvalue: function componentWillReceiveProps(new_props) {\n\t\t\tvar _props2 = this.props,\n\t\t\t    countries = _props2.countries,\n\t\t\t    value = _props2.value,\n\t\t\t    dictionary = _props2.dictionary;\n\n\t\t\t// Normalize `country` codes\n\n\t\t\tvar country = normalize_country_code(this.props.country, dictionary);\n\t\t\tvar new_country = normalize_country_code(new_props.country, dictionary);\n\n\t\t\t// If the default country changed\n\t\t\t// (e.g. in case of IP detection)\n\t\t\tif (new_country !== country) {\n\t\t\t\t// If the phone number input field is currently empty\n\t\t\t\t// (e.g. not touched yet) then change the selected `country`\n\t\t\t\t// to the newly passed one (e.g. as a result of a GeoIP query)\n\t\t\t\tif (!value) {\n\t\t\t\t\t// If the passed `country` allowed then update it\n\t\t\t\t\tif (countries.indexOf(new_country) !== -1) {\n\t\t\t\t\t\t// Set the new `country`\n\t\t\t\t\t\tthis.set_country(new_country, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// This code is executed:\n\t\t\t// * after `this.props.onChange(value)` is called\n\t\t\t// * if the `value` was externally set (e.g. cleared)\n\t\t\tif (new_props.value !== value) {\n\t\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t\t// which corresponding to `this.state.value`.\n\t\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t\t// needs `this.state.value` recalculation.\n\t\t\t\t// This is an optimization, it's like `shouldComponentUpdate()`.\n\t\t\t\t// This is supposed to save some CPU cycles, maybe not much, I didn't check.\n\t\t\t\t// Or maybe there was some other reason for this I don't remember now.\n\t\t\t\tif (new_props.value !== this.state.value_property) {\n\t\t\t\t\t// Update the `value` because it was externally set\n\n\t\t\t\t\t// Country code gets updated too\n\t\t\t\t\tvar country_code = this.state.country_code;\n\n\t\t\t\t\t// Autodetect country if `value` is set\n\t\t\t\t\t// and is international (which it should be)\n\t\t\t\t\tif (new_props.value && new_props.value[0] === '+') {\n\t\t\t\t\t\t// `parse().country` will be `undefined` in case of non-detection\n\t\t\t\t\t\tcountry_code = parse(new_props.value).country || country_code;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcountry_code: country_code,\n\t\t\t\t\t\tvalue: this.get_input_value_depending_on_the_country_selected(new_props.value, country_code),\n\t\t\t\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t\t\t\t// which corresponding to `this.state.value`.\n\t\t\t\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t\t\t\t// needs `this.state.value` recalculation.\n\t\t\t\t\t\tvalue_property: new_props.value\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _props3 = this.props,\n\t\t\t    saveOnIcons = _props3.saveOnIcons,\n\t\t\t    showCountrySelect = _props3.showCountrySelect,\n\t\t\t    nativeExpanded = _props3.nativeExpanded,\n\t\t\t    disabled = _props3.disabled,\n\t\t\t    autoComplete = _props3.autoComplete,\n\t\t\t    selectTabIndex = _props3.selectTabIndex,\n\t\t\t    selectMaxItems = _props3.selectMaxItems,\n\t\t\t    selectAriaLabel = _props3.selectAriaLabel,\n\t\t\t    selectCloseAriaLabel = _props3.selectCloseAriaLabel,\n\t\t\t    inputTabIndex = _props3.inputTabIndex,\n\t\t\t    style = _props3.style,\n\t\t\t    selectStyle = _props3.selectStyle,\n\t\t\t    inputStyle = _props3.inputStyle,\n\t\t\t    className = _props3.className,\n\t\t\t    inputClassName = _props3.inputClassName,\n\t\t\t    error = _props3.error,\n\t\t\t    indicateInvalid = _props3.indicateInvalid,\n\t\t\t    SelectComponent = _props3.selectComponent,\n\t\t\t    InputComponent = _props3.inputComponent,\n\t\t\t    dictionary = _props3.dictionary,\n\t\t\t    countries = _props3.countries,\n\t\t\t    country = _props3.country,\n\t\t\t    onCountryChange = _props3.onCountryChange,\n\t\t\t    flags = _props3.flags,\n\t\t\t    flagComponent = _props3.flagComponent,\n\t\t\t    flagsPath = _props3.flagsPath,\n\t\t\t    international = _props3.international,\n\t\t\t    internationalIcon = _props3.internationalIcon,\n\t\t\t    convertToNational = _props3.convertToNational,\n\t\t\t    metadata = _props3.metadata,\n\t\t\t    input_props = _objectWithoutProperties(_props3, ['saveOnIcons', 'showCountrySelect', 'nativeExpanded', 'disabled', 'autoComplete', 'selectTabIndex', 'selectMaxItems', 'selectAriaLabel', 'selectCloseAriaLabel', 'inputTabIndex', 'style', 'selectStyle', 'inputStyle', 'className', 'inputClassName', 'error', 'indicateInvalid', 'selectComponent', 'inputComponent', 'dictionary', 'countries', 'country', 'onCountryChange', 'flags', 'flagComponent', 'flagsPath', 'international', 'internationalIcon', 'convertToNational', 'metadata']);\n\n\t\t\t// `inputTabIndex` is deprecated, use just `tabIndex` instead\n\n\n\t\t\tif (inputTabIndex) {\n\t\t\t\tinput_props.tabIndex = inputTabIndex;\n\t\t\t}\n\n\t\t\tvar _state = this.state,\n\t\t\t    value = _state.value,\n\t\t\t    country_code = _state.country_code,\n\t\t\t    country_select_is_shown = _state.country_select_is_shown;\n\n\t\t\t// `type=\"tel\"` was reported to have issues with\n\t\t\t// Samsung keyboards caret position on Android OS.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/59\n\t\t\t// One may choose to pass `type=\"text\"` in those cases\n\t\t\t// but this will result in a non-digital input keyboard.\n\n\t\t\treturn React.createElement(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\tstyle: style,\n\t\t\t\t\tclassName: classNames('react-phone-number-input', {\n\t\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\n\t\t\t\t\t}, className) },\n\t\t\t\tReact.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: 'react-phone-number-input__row' },\n\t\t\t\t\tshowCountrySelect && this.can_change_country() && React.createElement(SelectComponent, {\n\t\t\t\t\t\tref: this.store_select_instance,\n\t\t\t\t\t\tvalue: country_code,\n\t\t\t\t\t\toptions: this.select_options,\n\t\t\t\t\t\tonChange: this.set_country,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\tonToggle: this.country_select_toggled,\n\t\t\t\t\t\tonTabOut: this.on_country_select_tab_out,\n\t\t\t\t\t\tnativeExpanded: nativeExpanded,\n\t\t\t\t\t\tautocomplete: true,\n\t\t\t\t\t\tautocompleteShowAll: true,\n\t\t\t\t\t\tmaxItems: selectMaxItems,\n\t\t\t\t\t\tconcise: true,\n\t\t\t\t\t\ttabIndex: selectTabIndex,\n\t\t\t\t\t\tfocusUponSelection: false,\n\t\t\t\t\t\tsaveOnIcons: saveOnIcons,\n\t\t\t\t\t\tname: input_props.name ? input_props.name + '__country' : undefined,\n\t\t\t\t\t\tariaLabel: selectAriaLabel,\n\t\t\t\t\t\tcloseAriaLabel: selectCloseAriaLabel,\n\t\t\t\t\t\tstyle: selectStyle,\n\t\t\t\t\t\tclassName: classNames('react-phone-number-input__country', {\n\t\t\t\t\t\t\t'react-phone-number-input__country--native-expanded': nativeExpanded\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tinputClassName: inputClassName }),\n\t\t\t\t\t!country_select_is_shown && React.createElement(InputComponent, _extends({\n\t\t\t\t\t\ttype: 'tel'\n\t\t\t\t\t}, input_props, {\n\t\t\t\t\t\tref: this.store_input_instance,\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tonChange: this.on_change,\n\t\t\t\t\t\tonBlur: this.on_blur,\n\t\t\t\t\t\tdisabled: disabled,\n\t\t\t\t\t\tautoComplete: autoComplete,\n\t\t\t\t\t\tparse: this.parse_character,\n\t\t\t\t\t\tformat: this.format,\n\t\t\t\t\t\tonKeyDown: this.on_key_down,\n\t\t\t\t\t\tstyle: inputStyle,\n\t\t\t\t\t\tclassName: classNames('rrui__input', 'rrui__input-element', 'rrui__input-field', {\n\t\t\t\t\t\t\t'rrui__input-field--invalid': error && indicateInvalid,\n\t\t\t\t\t\t\t'rrui__input-field--disabled': disabled\n\t\t\t\t\t\t}, 'react-phone-number-input__phone', inputClassName) }))\n\t\t\t\t),\n\t\t\t\terror && indicateInvalid && React.createElement(\n\t\t\t\t\t'div',\n\t\t\t\t\t{ className: classNames('rrui__input-error', 'react-phone-number-input__error') },\n\t\t\t\t\terror\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}]);\n\n\treturn Input;\n}(Component);\n\n// Parses a partially entered phone number\n// and returns the national number so far.\n// Not using `libphonenumber-js`'s `parse`\n// function here because `parse` only works\n// when the number is fully entered,\n// and this one is for partially entered number.\n\n\nInput.propTypes = {\n\t// Phone number `value`.\n\t// Is a plaintext international phone number\n\t// (e.g. \"+12223333333\" for USA)\n\tvalue: PropTypes.string,\n\n\t// This handler is called each time\n\t// the phone number <input/> changes its textual value.\n\tonChange: PropTypes.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets the parsed `value` in its `onBlur` handler,\n\t// not the formatted one.\n\t// A developer is not supposed to pass this `onBlur` property manually.\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\n\t// and this component passes this `onBlur` property further to\n\t// `input-format`'s `<ReactInput/>` which then modifies this `onBlur` handler\n\t// to return the correct parsed `value` so that it all works with `redux-form`.\n\tonBlur: PropTypes.func,\n\n\t// Set `onKeyDown` handler.\n\t// Can be used in special cases to handle e.g. enter pressed\n\tonKeyDown: PropTypes.func,\n\n\t// Disables both the <input/> and the <select/>\n\t// (is `false` by default)\n\tdisabled: PropTypes.bool.isRequired,\n\n\t// An error message below the `<input/>`\n\terror: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n\t// If this flag is `true` then the `error` is shown.\n\t// If this flag is `false` then the `error` is not shown (even if passed).\n\tindicateInvalid: PropTypes.bool,\n\n\t// Remembers the input and also autofills it\n\t// with a previously remembered phone number.\n\t// Default value: \"tel\".\n\t//\n\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n\t//\n\t// \"So when should you use autocomplete=\"off\"?\n\t//  One example is when you've implemented your own version\n\t//  of autocomplete for search. Another example is any form field\n\t//  where users will input and submit different kinds of information\n\t//  where it would not be useful to have the browser remember\n\t//  what was submitted previously\".\n\t//\n\tautoComplete: PropTypes.string.isRequired,\n\n\t// Two-letter country code\n\t// to be used as the default country\n\t// for local (non-international) phone numbers.\n\tcountry: PropTypes.string,\n\n\t// Is called when the selected country changes\n\t// (either by a user manually, or by autoparsing\n\t//  an international phone number being input).\n\t// This handler does not need to update the `country` property.\n\t// It's simply a listener for those who might need that for whatever purpose.\n\tonCountryChange: PropTypes.func,\n\n\t// Localization dictionary:\n\t// `{ International: 'Международный', RU: 'Россия', US: 'США', ... }`\n\tdictionary: PropTypes.objectOf(PropTypes.string).isRequired,\n\n\t// An optional list of allowed countries\n\tcountries: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n\t// Custom national flag icons\n\tflags: PropTypes.oneOfType([PropTypes.bool,\n\t// Legacy behaviour, will be removed\n\t// in some future major version upgrade.\n\tPropTypes.objectOf(PropTypes.element)]),\n\n\t// Flag icon component\n\tflagComponent: PropTypes.func.isRequired,\n\n\t// A base URL path for national flag SVG icons.\n\t// By default it uses the ones from `flag-icon-css` github repo.\n\tflagsPath: PropTypes.string.isRequired,\n\n\t// Whether to use native `<select/>` when expanded\n\tnativeExpanded: PropTypes.bool.isRequired,\n\n\t// If set to `false`, then country flags will be shown\n\t// for all countries in the options list\n\t// (not just for selected country).\n\tsaveOnIcons: PropTypes.bool.isRequired,\n\n\t// Whether to show country `<Select/>`\n\t// (is `true` by default)\n\tshowCountrySelect: PropTypes.bool.isRequired,\n\n\t// Whether to add the \"International\" option\n\t// to the list of countries.\n\tinternational: PropTypes.bool,\n\n\t// Custom \"International\" phone number type icon.\n\tinternationalIcon: PropTypes.element.isRequired,\n\n\t// Should the initially passed phone number `value`\n\t// be converted to a national phone number for its country.\n\t// (is `false` by default)\n\tconvertToNational: PropTypes.bool.isRequired,\n\n\t// HTML `tabindex` attribute for the country select\n\tselectTabIndex: PropTypes.number,\n\n\t// Defines the height of the dropdown country select list\n\tselectMaxItems: PropTypes.number,\n\n\t// (deprecated, use just `tabIndex` instead)\n\t// HTML `tabindex` attribute for the phone number `<input/>`\n\tinputTabIndex: PropTypes.number,\n\n\t// `aria-label` for the `<Select/>`'s `<button/>`\n\tselectAriaLabel: PropTypes.string,\n\n\t// `aria-label` for the `<Select/>`'s \"Close\" button\n\t// (which is an \"x\" visible in fullscreen mode).\n\t// (not yet implemented but is likely to be)\n\tselectCloseAriaLabel: PropTypes.string,\n\n\t// CSS style object\n\tstyle: PropTypes.object,\n\n\t// Inline CSS styles for country `<select/>`\n\tselectStyle: PropTypes.object,\n\n\t// Inline CSS styles for phone number `<input/>`\n\tinputStyle: PropTypes.object,\n\n\t// Component CSS class\n\tclassName: PropTypes.string,\n\n\t// `<input/>` CSS class\n\t// (both for the phone number `<input/>` and the autocomplete `<input/>`)\n\tinputClassName: PropTypes.string,\n\n\t// `<Select/>` from `react-responsive-ui` is used by default\n\tselectComponent: PropTypes.func.isRequired,\n\n\t// `<ReactInput/>` from `input-format` is used by default\n\tinputComponent: PropTypes.func.isRequired,\n\n\t// `libphonenumber-js` metadata\n\tmetadata: PropTypes.shape({\n\t\tcountry_phone_code_to_countries: PropTypes.object.isRequired,\n\t\tcountries: PropTypes.object.isRequired\n\t}).isRequired\n};\nInput.defaultProps = {\n\t// Is enabled\n\tdisabled: false,\n\n\t// Remember (and autofill) as a phone number\n\tautoComplete: 'tel',\n\n\t// Include all countries by default\n\tcountries: all_countries,\n\n\t// Flag icon component\n\tflagComponent: FlagComponent,\n\n\t// By default use the ones from `flag-icon-css` github repo.\n\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\n\n\t// Default international icon (globe)\n\tinternationalIcon: React.createElement(\n\t\t'div',\n\t\t{ className: classNames('react-phone-number-input__icon', 'react-phone-number-input__icon--international') },\n\t\tReact.createElement(InternationalIcon, null)\n\t),\n\n\t// Custom country names\n\tdictionary: {},\n\n\t// Whether to use native `<select/>` when expanded\n\tnativeExpanded: false,\n\n\t// Don't show flags for all countries in the options list\n\t// (show it just for selected country).\n\t// (to save user's traffic because all flags are about 3 MegaBytes)\n\tsaveOnIcons: true,\n\n\t// Show country `<Select/>` by default\n\tshowCountrySelect: true,\n\n\t// Don't convert the initially passed phone number `value`\n\t// to a national phone number for its country.\n\t// The reason is that the newer generation grows up when\n\t// there are no stationary phones and therefore everyone inputs\n\t// phone numbers with a `+` in their smartphones so local phone numbers\n\t// should now be considered obsolete.\n\tconvertToNational: false,\n\n\t// `<Select/>` from `react-responsive-ui` is used by default\n\tselectComponent: Select,\n\n\t// `<ReactInput/>` from `input-format` is used by default\n\tinputComponent: ReactInput\n};\n\nvar _initialiseProps = function _initialiseProps() {\n\tvar _this2 = this;\n\n\tthis.state = {};\n\n\tthis.set_country = function (country_code, focus) {\n\t\tvar _props4 = _this2.props,\n\t\t    metadata = _props4.metadata,\n\t\t    convertToNational = _props4.convertToNational;\n\n\t\t// Previously selected country\n\n\t\tvar previous_country_code = _this2.state.country_code;\n\n\t\t_this2.set_country_code_value(country_code);\n\n\t\t// Adjust the phone number (`value`)\n\t\t// according to the selected `country_code`\n\n\t\tvar value = _this2.state.value;\n\n\t\t// If the `value` property holds any digits already\n\n\t\tif (value) {\n\t\t\t// If switching to a country from International or another country\n\t\t\tif (country_code) {\n\t\t\t\t// If the phone number was entered in international format.\n\t\t\t\t// The phone number may be incomplete.\n\t\t\t\t// The phone number entered not necessarily starts with\n\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\t// If the international phone number already contains\n\t\t\t\t\t// any country phone code then trim the country phone code part.\n\t\t\t\t\t// (that also could be the newly selected country phone code prefix)\n\t\t\t\t\tvalue = strip_country_phone_code(value, metadata);\n\n\t\t\t\t\t// Else just trim the + sign\n\t\t\t\t\tif (value[0] === '+') {\n\t\t\t\t\t\tvalue = value.slice('+'.length);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prepend country phone code part if `convertToNational` is not set\n\t\t\t\t\tif (!convertToNational) {\n\t\t\t\t\t\tvalue = '+' + getPhoneCode(country_code) + value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If switching to International from a country\n\t\t\tif (previous_country_code && !country_code) {\n\t\t\t\t// If no leading `+` sign\n\t\t\t\tif (value[0] !== '+') {\n\t\t\t\t\t// Format the local phone number as an international one.\n\t\t\t\t\t// The phone number entered not necessarily even starts with\n\t\t\t\t\t// the previously selected country phone prefix.\n\t\t\t\t\t// Even if the phone number belongs to whole another country\n\t\t\t\t\t// it will still be parsed into some national phone number.\n\t\t\t\t\tvar national_number = parse_partial_number(value, previous_country_code, metadata).national_number;\n\t\t\t\t\tvalue = format(national_number, previous_country_code, 'International_plaintext', metadata);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Update the adjusted `<input/>` `value`\n\t\t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t\t// according to the new `this.state.value`.\n\t\t\t// (keep them in sync)\n\t\t\t_this2.on_change(value, country_code, true);\n\t\t}\n\t\t// Disabling this feature because if a user selects a country\n\t\t// then it means he doesn't know how to input his phone number\n\t\t// in international format therefore not forcing it\n\t\t// by prepending `+${getPhoneCode(country_code)}`.\n\t\t//\n\t\t// else\n\t\t// {\n\t\t// \t// If the `value` property is `undefined`\n\t\t// \t// (which means the `<input/>` is either empty\n\t\t// \t//  or just the country phone code part is entered)\n\t\t// \t// and `convertToNational` wasn't set to `true`\n\t\t// \t// then populate `<input/>` with the selected country\n\t\t// \t// phone code prefix.\n\t\t// \tif (!convertToNational && country_code)\n\t\t// \t{\n\t\t// \t\t// Update the adjusted `<input/>` `value`\n\t\t// \t\t// and update `this.props.value` (in e.164 phone number format)\n\t\t// \t\t// according to the new `this.state.value`.\n\t\t// \t\t// (keep them in sync)\n\t\t// \t\tthis.on_change(`+${getPhoneCode(country_code)}`, country_code, true)\n\t\t// \t}\n\t\t// }\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tif (focus !== false) {\n\t\t\tsetTimeout(_this2.focus, 0);\n\t\t}\n\t};\n\n\tthis.parse_character = function (character, value) {\n\t\tvar countries = _this2.props.countries;\n\n\n\t\tif (character === '+') {\n\t\t\t// Only allow a leading `+`\n\t\t\tif (!value) {\n\t\t\t\t// If the \"International\" option is available\n\t\t\t\t// then allow the leading `+` because it's meant to be this way.\n\t\t\t\t//\n\t\t\t\t// Otherwise, the leading `+` will either erase all subsequent digits\n\t\t\t\t// (if they're not appropriate for the selected country)\n\t\t\t\t// or the subsequent digits (if any) will join the `+`\n\t\t\t\t// forming an international phone number. Because a user\n\t\t\t\t// might be comfortable with entering an international phone number\n\t\t\t\t// (i.e. with country code) rather than the local one.\n\t\t\t\t// Therefore such possibility is given.\n\t\t\t\t//\n\t\t\t\treturn character;\n\t\t\t}\n\t\t}\n\t\t// For digits.\n\t\t// Converts wide-ascii and arabic-indic numerals to European numerals.\n\t\t// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n\t\telse if (DIGITS[character]) {\n\t\t\t\tvar metadata = _this2.props.metadata;\n\t\t\t\tvar country_code = _this2.state.country_code;\n\n\t\t\t\t// If the \"International\" option is not available\n\t\t\t\t// and if the value has a leading `+`\n\t\t\t\t// then it means that the phone number being entered\n\t\t\t\t// is an international one, so only allow the country phone code\n\t\t\t\t// for the selected country to be entered.\n\n\t\t\t\tif (!should_add_international_option(_this2.props) && value && value[0] === '+') {\n\t\t\t\t\tif (!could_phone_number_belong_to_country(value + DIGITS[character], country_code, metadata)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn DIGITS[character];\n\t\t\t}\n\t};\n\n\tthis.format = function (input_text) {\n\t\tvar country_code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this2.state.country_code;\n\t\tvar metadata = _this2.props.metadata;\n\n\t\t// \"As you type\" formatter\n\n\t\tvar formatter = new as_you_type(country_code, metadata);\n\n\t\t// Is used to check if a country code can already be derived\n\t\t_this2.formatter = formatter;\n\n\t\t// Format phone number\n\t\tvar text = formatter.input(input_text);\n\n\t\treturn { text: text, template: formatter.template };\n\t};\n\n\tthis.is_selectable_country = function (country_code) {\n\t\tvar countries = _this2.props.countries;\n\t\tvar _iteratorNormalCompletion3 = true;\n\t\tvar _didIteratorError3 = false;\n\t\tvar _iteratorError3 = undefined;\n\n\t\ttry {\n\n\t\t\tfor (var _iterator3 = _getIterator(countries), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\tvar available_country_code = _step3.value;\n\n\t\t\t\tif (available_country_code === country_code) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError3 = true;\n\t\t\t_iteratorError3 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t_iterator3.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.focus = function () {\n\t\tReactDOM.findDOMNode(_this2.input).focus();\n\t};\n\n\tthis.on_key_down = function (event) {\n\t\tvar onKeyDown = _this2.props.onKeyDown;\n\n\t\t// Expand country `<select/>`` on \"Down arrow\" key press\n\n\t\tif (event.keyCode === 40) {\n\t\t\t_this2.select.toggle();\n\t\t}\n\n\t\tif (onKeyDown) {\n\t\t\tonKeyDown(event);\n\t\t}\n\t};\n\n\tthis.on_change = function (value) {\n\t\tvar country_code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this2.state.country_code;\n\t\tvar changed_country = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\t\tvar _props5 = _this2.props,\n\t\t    metadata = _props5.metadata,\n\t\t    onChange = _props5.onChange;\n\n\t\t// If the `<input/>` is empty then just exit\n\n\t\tif (!value) {\n\t\t\treturn _this2.setState({\n\t\t\t\t// State `value` is the parsed input value\n\t\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\t\t// This is not `this.props.value`\n\t\t\t\t// i.e. it's not neccessarily an international plaintext phone number,\n\t\t\t\t// it's just the `value` parsed by `input-format`.\n\t\t\t\tvalue: value,\n\t\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t\t// which corresponding to `this.state.value`.\n\t\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t\t// needs `this.state.value` recalculation.\n\t\t\t\tvalue_property: value\n\t\t\t},\n\t\t\t// Write the new `this.props.value`.\n\t\t\tfunction () {\n\t\t\t\treturn onChange(value);\n\t\t\t});\n\t\t}\n\n\t\t// For international phone numbers\n\t\tif (value[0] === '+') {\n\t\t\t// If an international phone number is being erased up to the first `+` sign\n\t\t\t// or if an international phone number is just starting (with a `+` sign)\n\t\t\t// then unset the current country because it's clear that a user intends to change it.\n\t\t\tif (value.length === 1) {\n\t\t\t\t// If \"International\" country option has not been disabled\n\t\t\t\t// then reset the currently selected country.\n\t\t\t\tif (!changed_country && should_add_international_option(_this2.props)) {\n\t\t\t\t\tcountry_code = undefined;\n\t\t\t\t\t_this2.set_country_code_value(country_code);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// If a phone number is being input as an international one\n\t\t\t\t// and the country code can already be derived,\n\t\t\t\t// then switch the country.\n\t\t\t\t// (`001` is a special \"non-geograpical entity\" code in `libphonenumber` library)\n\t\t\t\tif (!changed_country && _this2.formatter.country && _this2.formatter.country !== '001' && _this2.is_selectable_country(_this2.formatter.country)) {\n\t\t\t\t\tcountry_code = _this2.formatter.country;\n\t\t\t\t\t_this2.set_country_code_value(country_code);\n\t\t\t\t}\n\t\t\t\t// If \"International\" country option has not been disabled\n\t\t\t\t// and the international phone number entered doesn't correspond\n\t\t\t\t// to the currently selected country then reset the currently selected country.\n\t\t\t\telse if (!changed_country && should_add_international_option(_this2.props) && country_code && value.indexOf(getPhoneCode(country_code) !== '+'.length)) {\n\t\t\t\t\t\tcountry_code = undefined;\n\t\t\t\t\t\t_this2.set_country_code_value(country_code);\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// If \"International\" mode is selected\n\t\t// and the `value` doesn't start with a + sign,\n\t\t// then prepend it to the `value`.\n\t\telse if (!country_code) {\n\t\t\t\tvalue = '+' + value;\n\t\t\t}\n\n\t\t// `this.state.value_property` is the `this.props.value`\n\t\t// which corresponding to `this.state.value`.\n\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t// against `newProps.value` to find out if the new `value` property\n\t\t// needs `this.state.value` recalculation.\n\t\tvar value_property = void 0;\n\n\t\t// `value` equal to `+` makes no sense\n\t\tif (value === '+') {\n\t\t\tvalue_property = undefined;\n\t\t}\n\t\t// If a phone number is in international format then check\n\t\t// that the phone number entered belongs to the selected country.\n\t\telse if (country_code && value[0] === '+' && !(value.indexOf('+' + getPhoneCode(country_code)) === 0 && value.length > ('+' + getPhoneCode(country_code)).length)) {\n\t\t\t\tvalue_property = undefined;\n\t\t\t}\n\t\t\t// Should be a most-probably-valid phone number\n\t\t\telse {\n\t\t\t\t\t// Convert `value` to E.164 phone number format\n\t\t\t\t\tvalue_property = e164(value, country_code, metadata);\n\t\t\t\t}\n\n\t\t_this2.setState({\n\t\t\t// State `value` is the parsed input value\n\t\t\t// (e.g. `+78005553535`, `1234567`).\n\t\t\t// This is not `this.props.value`\n\t\t\t// i.e. it's not neccessarily an international plaintext phone number,\n\t\t\t// it's just the `value` parsed by `input-format`.\n\t\t\tvalue: value,\n\t\t\t// `this.state.value_property` is the `this.props.value`\n\t\t\t// which corresponding to `this.state.value`.\n\t\t\t// It is being compared in `componentWillReceiveProps()`\n\t\t\t// against `newProps.value` to find out if the new `value` property\n\t\t\t// needs `this.state.value` recalculation.\n\t\t\tvalue_property: value_property\n\t\t},\n\t\t// Write the new `this.props.value`.\n\t\tfunction () {\n\t\t\treturn onChange(value_property);\n\t\t});\n\t};\n\n\tthis.on_blur = function (event) {\n\t\tvar onBlur = _this2.props.onBlur;\n\t\tvar value_property = _this2.state.value_property;\n\n\n\t\tif (!onBlur) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar _event = _extends({}, event, {\n\t\t\ttarget: _extends({}, event.target, {\n\t\t\t\tvalue: value_property\n\t\t\t})\n\n\t\t\t// For `redux-form` event detection.\n\t\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\n\t\t});_event.stopPropagation = event.stopPropagation;\n\t\t_event.preventDefault = event.preventDefault;\n\n\t\treturn onBlur(_event);\n\t};\n\n\tthis.country_select_toggled = function (is_shown) {\n\t\t_this2.setState({ country_select_is_shown: is_shown });\n\t};\n\n\tthis.on_country_select_tab_out = function (event) {\n\t\tevent.preventDefault();\n\n\t\t// Focus the phone number input upon country selection\n\t\t// (do it in a timeout because the `<input/>`\n\t\t//  is hidden while selecting a country)\n\t\tsetTimeout(_this2.focus, 0);\n\t};\n\n\tthis.store_select_instance = function (instance) {\n\t\t_this2.select = instance;\n\t};\n\n\tthis.store_input_instance = function (instance) {\n\t\t_this2.input = instance;\n\t};\n};\n\nexport default Input;\nfunction parse_partial_number(value, country_code, metadata) {\n\t// \"As you type\" formatter\n\tvar formatter = new as_you_type(country_code, metadata);\n\n\t// Input partially entered phone number\n\tformatter.input(value);\n\n\t// Return the parsed partial phone number\n\t// (has `.national_number`, `.country`, etc)\n\treturn formatter;\n}\n\n// Converts `value` to E.164 phone number format\nfunction e164(value, country_code, metadata) {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\n\t// If the phone number is being input in an international format\n\tif (value[0] === '+') {\n\t\t// If it's just the `+` sign\n\t\tif (value.length === 1) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// If there are some digits, the `value` is returned as is\n\t\treturn value;\n\t}\n\n\t// For non-international phone number a country code is required\n\tif (!country_code) {\n\t\treturn undefined;\n\t}\n\n\t// The phone number is being input in a country-specific format\n\n\tvar partial_national_number = parse_partial_number(value, country_code).national_number;\n\n\tif (!partial_national_number) {\n\t\treturn undefined;\n\t}\n\n\t// The value is converted to international plaintext\n\treturn format(partial_national_number, country_code, 'International_plaintext', metadata);\n}\n\n// Gets country flag element by country code\nfunction get_country_option_icon(countryCode, _ref2) {\n\tvar flags = _ref2.flags,\n\t    flagsPath = _ref2.flagsPath,\n\t    flagComponent = _ref2.flagComponent;\n\n\tif (flags === false) {\n\t\treturn undefined;\n\t}\n\n\tif (flags && flags[countryCode]) {\n\t\treturn flags[countryCode];\n\t}\n\n\treturn React.createElement(flagComponent, { countryCode: countryCode, flagsPath: flagsPath });\n}\n\n// Whether to add the \"International\" option to the list of countries\nfunction should_add_international_option(properties) {\n\tvar countries = properties.countries,\n\t    international = properties.international;\n\n\t// If this behaviour is explicitly set, then do as it says.\n\n\tif (international !== undefined) {\n\t\treturn international;\n\t}\n\n\t// If `countries` is empty,\n\t// then only \"International\" option is available, so add it.\n\tif (countries.length === 0) {\n\t\treturn true;\n\t}\n\n\t// If `countries` is a single allowed country,\n\t// then don't add the \"International\" option\n\t// because it would make no sense.\n\tif (countries.length === 1) {\n\t\treturn false;\n\t}\n\n\t// Show the \"International\" option by default\n\treturn true;\n}\n\n// Is it possible that the partially entered  phone number belongs to the given country\nfunction could_phone_number_belong_to_country(phone_number, country_code, metadata) {\n\t// Strip the leading `+`\n\tvar phone_number_digits = phone_number.slice('+'.length);\n\n\tvar _iteratorNormalCompletion4 = true;\n\tvar _didIteratorError4 = false;\n\tvar _iteratorError4 = undefined;\n\n\ttry {\n\t\tfor (var _iterator4 = _getIterator(_Object$keys(metadata.country_phone_code_to_countries)), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n\t\t\tvar country_phone_code = _step4.value;\n\n\t\t\tvar possible_country_phone_code = phone_number_digits.substring(0, country_phone_code.length);\n\t\t\tif (country_phone_code.indexOf(possible_country_phone_code) === 0) {\n\t\t\t\t// This country phone code is possible.\n\t\t\t\t// Does the given country correspond to this country phone code.\n\t\t\t\tif (metadata.country_phone_code_to_countries[country_phone_code].indexOf(country_code) >= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError4 = true;\n\t\t_iteratorError4 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion4 && _iterator4.return) {\n\t\t\t\t_iterator4.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError4) {\n\t\t\t\tthrow _iteratorError4;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// If a formatted phone number is an international one\n// then it strips the `+${country_phone_code}` prefix from the formatted number.\nfunction strip_country_phone_code(formatted_number, metadata) {\n\tif (!formatted_number || formatted_number[0] !== '+' || formatted_number === '+') {\n\t\treturn formatted_number;\n\t}\n\n\tvar _iteratorNormalCompletion5 = true;\n\tvar _didIteratorError5 = false;\n\tvar _iteratorError5 = undefined;\n\n\ttry {\n\t\tfor (var _iterator5 = _getIterator(_Object$keys(metadata.country_phone_code_to_countries)), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n\t\t\tvar country_phone_code = _step5.value;\n\n\t\t\tif (formatted_number.indexOf(country_phone_code) === '+'.length) {\n\t\t\t\treturn formatted_number.slice('+'.length + country_phone_code.length).trim();\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError5 = true;\n\t\t_iteratorError5 = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion5 && _iterator5.return) {\n\t\t\t\t_iterator5.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError5) {\n\t\t\t\tthrow _iteratorError5;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn formatted_number;\n}\n\n// Validates country code\nfunction normalize_country_code(country, dictionary) {\n\t// Normalize `country` if it's an empty string\n\tif (country === '') {\n\t\tcountry = undefined;\n\t}\n\n\t// No country is selected (\"International\")\n\tif (country === undefined || country === null) {\n\t\treturn country;\n\t}\n\n\t// Check that `country` code exists\n\tif (dictionary[country] || default_dictionary[country]) {\n\t\treturn country;\n\t}\n\n\tthrow new Error('Unknown country: \"' + country + '\"');\n}\n//# sourceMappingURL=Input.js.map","import React from 'react';\n\nexport default function InternationalIcon() {\n\treturn React.createElement(\n\t\t\"svg\",\n\t\t{ version: \"1.1\", xmlns: \"http://www.w3.org/2000/svg\", xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n\t\t\tviewBox: \"0 0 356.926 356.926\" },\n\t\tReact.createElement(\n\t\t\t\"g\",\n\t\t\tnull,\n\t\t\tReact.createElement(\n\t\t\t\t\"g\",\n\t\t\t\tnull,\n\t\t\t\tReact.createElement(\"path\", { d: \"M211.89,213.669c0-10.475-8.521-18.997-18.996-18.997c-0.401,0-0.799,0.017-1.193,0.041v2.406 c0.396-0.028,0.79-0.061,1.193-0.061c9.158,0,16.608,7.452,16.608,16.611s-7.45,16.61-16.608,16.61 c-0.269,0-0.53-0.027-0.795-0.041v0.897v1.509v4.723H186.2v3.182h13.388v-3.182h-5.104v-4.774 C204.218,231.781,211.89,223.607,211.89,213.669z\" }),\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"g\",\n\t\t\t\t\tnull,\n\t\t\t\t\tReact.createElement(\"polygon\", { points: \"260.072,79.408 260.398,82.045 256.447,82.882 255.913,88.517 260.677,88.517 266.998,87.913 270.251,84.021 266.788,82.678 264.883,80.488 262.024,75.858 260.677,69.329 255.286,70.409 253.799,72.721 253.799,75.312 256.378,77.084 \" }),\n\t\t\t\t\tReact.createElement(\"polygon\", { points: \"255.495,81.569 255.773,78.037 252.637,76.683 248.233,77.706 244.945,82.94 244.945,86.344 248.768,86.344 \" }),\n\t\t\t\t\tReact.createElement(\"path\", { d: \"M164.852,96.598l-0.976,2.498h-4.7v2.428h1.121c0,0,0.07,0.511,0.168,1.191l2.876-0.238l1.783-1.121l0.465-2.248 l2.335-0.204l0.912-1.888l-2.138-0.442L164.852,96.598z\" }),\n\t\t\t\t\tReact.createElement(\"polygon\", { points: \"152.739,101.001 152.565,103.366 155.976,103.081 156.324,100.705 154.279,99.096 \\t\\t\\t\" }),\n\t\t\t\t\tReact.createElement(\"path\", { d: \"M356.868,176.633c-0.047-5.223-0.313-10.398-0.802-15.505c-1.662-17.01-5.717-33.311-11.828-48.589 c-0.441-1.127-0.859-2.283-1.336-3.41c-8.121-19.183-19.531-36.646-33.474-51.721c-0.906-0.987-1.835-1.952-2.765-2.916 c-2.649-2.736-5.333-5.415-8.156-7.971C266.788,17.631,224.642,0,178.463,0C131.896,0,89.447,17.957,57.635,47.271 c-7.413,6.832-14.221,14.303-20.408,22.285C13.919,99.717,0,137.49,0,178.463c0,98.398,80.059,178.463,178.463,178.463 c69.225,0,129.316-39.643,158.897-97.399c6.32-12.327,11.247-25.491,14.569-39.294c0.837-3.486,1.58-7.018,2.208-10.585 c1.801-10.137,2.788-20.56,2.788-31.196C356.902,177.859,356.868,177.249,356.868,176.633z M323.278,105.306l1.022-1.162 c1.359,2.637,2.649,5.304,3.846,8.028l-1.708-0.07l-3.172,0.436v-7.233H323.278z M297.484,74.156l0.023-7.971 c2.812,2.975,5.508,6.036,8.087,9.214l-3.207,4.781l-11.247-0.111l-0.696-2.341L297.484,74.156z M82.214,54.364v-0.302h3.567 l0.325-1.226h5.838v2.55l-1.691,2.236h-8.052v-3.259H82.214z M87.925,62.323c0,0,3.578-0.61,3.892-0.61c0.296,0,0,3.573,0,3.573 l-8.081,0.511l-1.534-1.847L87.925,62.323z M334.642,133.156h-13.06l-7.971-5.92l-8.365,0.808v5.112h-2.648l-2.848-2.033 l-14.512-3.671v-9.4l-18.38,1.423l-5.705,3.062h-7.285l-3.59-0.36l-8.854,4.926v9.254l-18.097,13.065l1.5,5.583h3.677 l-0.964,5.315l-2.58,0.953l-0.133,13.884l15.633,17.823h6.819l0.407-1.081h12.246l3.531-3.265h6.948l3.812,3.811l10.328,1.069 l-1.359,13.757l11.503,20.28l-6.064,11.572l0.406,5.438l4.775,4.752v13.095l6.251,8.412v10.897h5.391 c-30.046,36.913-75.823,60.534-127.026,60.534c-90.312,0-163.783-73.454-163.783-163.777c0-22.732,4.665-44.401,13.077-64.089 v-5.106l5.855-7.11c2.033-3.846,4.212-7.582,6.542-11.235l0.25,2.974l-6.791,8.261c-2.108,3.985-4.084,8.052-5.855,12.217v9.312 l6.791,3.276v12.955l6.535,11.136l5.316,0.808l0.68-3.817l-6.245-9.661l-1.237-9.388h3.677l1.557,9.673l9.051,13.193l-2.33,4.27 l5.734,8.795l14.291,3.532v-2.306l5.711,0.808l-0.534,4.078l4.484,0.825l6.948,1.888l9.8,11.171l12.507,0.941l1.237,10.207 l-8.58,5.984l-0.39,9.115l-1.237,5.588l12.386,15.5l0.947,5.32c0,0,4.49,1.209,5.048,1.209c0.535,0,10.062,7.227,10.062,7.227 v28.024l3.393,0.964l-2.294,12.92l5.71,7.634l-1.068,12.827l7.563,13.269l9.696,8.47l9.731,0.197l0.952-3.148l-7.163-6.029 l0.418-2.986l1.272-3.684l0.273-3.741l-4.839-0.14l-2.44-3.066l4.021-3.881l0.546-2.916l-4.496-1.29l0.261-2.719l6.402-0.976 l9.73-4.672l3.265-6.006l10.196-13.06l-2.312-10.213l3.131-5.438l9.399,0.278l6.327-5.02l2.051-19.693l7.04-8.877l1.237-5.704 l-6.39-2.045l-4.224-6.942l-14.419-0.145l-11.444-4.351l-0.534-8.162l-3.811-6.675l-10.335-0.145l-5.995-9.382l-5.298-2.585 l-0.273,2.858l-9.672,0.569l-3.532-4.926l-10.079-2.045l-8.302,9.603l-13.065-2.23l-0.953-14.727l-9.527-1.632l3.805-7.221 l-1.092-4.148l-12.531,8.371l-7.877-0.964l-2.817-6.158l1.737-6.355l4.339-8.005l9.998-5.072h19.322l-0.064,5.891l6.948,3.235 l-0.558-10.062l5.007-5.037l10.103-6.64l0.703-4.659l10.068-10.486l10.707-5.937l-0.941-0.773l7.256-6.826l2.655,0.703 l1.214,1.522l2.76-3.062l0.68-0.296l-3.021-0.43l-3.084-0.987v-2.963l1.632-1.33h3.579l1.655,0.726l1.418,2.858l1.737-0.267 v-0.244l0.5,0.163l5.02-0.772l0.714-2.463l2.852,0.726v2.667l-2.666,1.818h0.018l0.377,2.928l9.115,2.794c0,0,0,0.035,0.023,0.11 l2.079-0.18l0.146-3.939l-7.209-3.282l-0.396-1.894l5.972-2.033l0.273-5.722l-6.245-3.805l-0.412-9.667l-8.581,4.218h-3.143 l0.837-7.355l-11.688-2.748l-4.816,3.654v11.119l-8.673,2.754l-3.486,7.244l-3.758,0.604v-9.277l-8.162-1.133l-4.096-2.667 l-1.639-6.007l14.611-8.54l7.14-2.179l0.72,4.804l3.991-0.215l0.308-2.411l4.166-0.599l0.07-0.842l-1.784-0.738l-0.407-2.544 l5.118-0.43l3.091-3.213l0.18-0.238l0.035,0.012l0.941-0.976l10.753-1.354l4.746,4.032l-12.467,6.64l15.871,3.747l2.045-5.31 h6.948l2.44-4.625l-4.903-1.226v-5.856l-15.359-6.803l-10.62,1.226l-6.001,3.125l0.407,7.628l-6.257-0.953l-0.964-4.212 l6.007-5.449l-10.898-0.535l-3.125,0.953l-1.359,3.677l4.084,0.686l-0.813,4.084l-6.936,0.406l-1.092,2.725L118.987,52.4 c0,0-0.273-5.711-0.703-5.711c-0.389,0,7.901-0.145,7.901-0.145l5.995-5.85l-3.271-1.632l-4.339,4.223l-7.222-0.406l-4.403-6.019 h-9.254L94.03,44.07h8.848l0.796,2.597l-2.307,2.172l9.807,0.279l1.487,3.532l-11.032-0.407l-0.546-2.725l-6.925-1.499 l-3.689-2.033l-8.255,0.069c27.043-19.699,60.284-31.358,96.226-31.358c41.403,0,79.263,15.476,108.124,40.915l-1.929,3.474 l-7.564,2.962l-3.194,3.462l0.743,4.02l3.893,0.546l2.358,5.867l6.704-2.713l1.127,7.86h-2.045l-5.519-0.819l-6.111,1.022 l-5.926,8.377l-8.458,1.319l-1.221,7.25l3.579,0.842l-1.046,4.665l-8.412-1.69l-7.703,1.69l-1.639,4.293l1.325,9.01l4.531,2.115 l7.61-0.046l5.123-0.465l1.58-4.078l8.018-10.422l5.264,1.081l5.193-4.7l0.976,3.678l12.78,8.621l-1.557,2.108l-5.763-0.308 l2.23,3.137l3.556,0.79l4.159-1.737l-0.093-5.002l1.859-0.923l-1.487-1.575l-8.528-4.758l-2.254-6.314h7.099l2.243,2.248 l6.134,5.257l0.244,6.367l6.332,6.733l2.348-9.231l4.392-2.394l0.802,7.552l4.287,4.7l8.54-0.139 c1.661,4.247,3.148,8.563,4.427,12.978L334.642,133.156z M97.324,81.092l4.27-2.044l3.881,0.929l-1.324,5.211l-4.183,1.319 L97.324,81.092z M120.073,93.35v3.37h-9.783l-3.689-1.028l0.918-2.341l4.7-1.94h6.437v1.94H120.073z M124.582,98.05v3.259 l-2.463,1.58l-3.044,0.575c0,0,0-4.903,0-5.415H124.582z M121.822,96.72v-3.893l3.363,3.067L121.822,96.72z M123.355,104.568 v3.178l-2.347,2.347h-5.211l0.813-3.573l2.463-0.215l0.5-1.226L123.355,104.568z M110.39,98.05h5.408l-6.948,9.696l-2.852-1.534 l0.616-4.084L110.39,98.05z M132.529,103.464v3.166h-5.211l-1.417-2.062v-2.951h0.406L132.529,103.464z M127.748,99.096 l1.475-1.557l2.498,1.557l-1.999,1.656L127.748,99.096z M337.291,141.428l0.511-0.61c0.232,0.93,0.441,1.859,0.662,2.789 L337.291,141.428z\" }),\n\t\t\t\t\tReact.createElement(\"path\", { d: \"M27.734,109.268v5.106c1.771-4.177,3.747-8.231,5.855-12.223L27.734,109.268z\" })\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t);\n}\n//# sourceMappingURL=InternationalIcon.js.map","import _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport metadata from 'libphonenumber-js/metadata.min.json';\n\nimport Input from './Input';\n\nvar InputWithDefaultMetadata = function (_Component) {\n\t_inherits(InputWithDefaultMetadata, _Component);\n\n\tfunction InputWithDefaultMetadata() {\n\t\t_classCallCheck(this, InputWithDefaultMetadata);\n\n\t\treturn _possibleConstructorReturn(this, (InputWithDefaultMetadata.__proto__ || _Object$getPrototypeOf(InputWithDefaultMetadata)).apply(this, arguments));\n\t}\n\n\t_createClass(InputWithDefaultMetadata, [{\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar _this2 = this;\n\n\t\t\treturn React.createElement(Input, _extends({\n\t\t\t\tref: function ref(_ref) {\n\t\t\t\t\treturn _this2.input = _ref;\n\t\t\t\t}\n\t\t\t}, this.props, {\n\t\t\t\tmetadata: metadata }));\n\t\t}\n\t}, {\n\t\tkey: 'focus',\n\t\tvalue: function focus() {\n\t\t\treturn this.input.focus();\n\t\t}\n\t}]);\n\n\treturn InputWithDefaultMetadata;\n}(Component);\n\nexport default InputWithDefaultMetadata;\n//# sourceMappingURL=InputWithDefaultMetadata.js.map","import Input from './modules/Input'\nexport { default as default } from './modules/InputWithDefaultMetadata'\n\nexport\n{\n\tparse as parse_phone_number,\n\tparse as parsePhoneNumber,\n\tformat as format_phone_number,\n\tformat as formatPhoneNumber,\n\tis_valid_number as is_valid_phone_number,\n\tis_valid_number as isValidPhoneNumber,\n}\nfrom 'libphonenumber-js'\n","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar handleScroll = function (parent, _a) {\n    var scrollLeft = _a.scrollLeft, scrollTop = _a.scrollTop;\n    parent.scrollLeft = scrollLeft;\n    parent.scrollTop = scrollTop;\n};\nexport default function calculate(target, options) {\n    if (!target || !(target instanceof HTMLElement))\n        throw new Error('Element is required in scrollIntoViewIfNeeded');\n    var config = __assign({ handleScroll: handleScroll }, options);\n    var defaultOffset = { top: 0, right: 0, bottom: 0, left: 0 };\n    config.offset = config.offset\n        ? __assign({}, defaultOffset, config.offset) : defaultOffset;\n    function withinBounds(value, min, max, extent) {\n        if (config.centerIfNeeded === false ||\n            (max <= value + extent && value <= min + extent)) {\n            return Math.min(max, Math.max(min, value));\n        }\n        else {\n            return (min + max) / 2;\n        }\n    }\n    var offset = config.offset;\n    var offsetTop = offset.top;\n    var offsetLeft = offset.left;\n    var offsetBottom = offset.bottom;\n    var offsetRight = offset.right;\n    function makeArea(left, top, width, height) {\n        return {\n            left: left + offsetLeft,\n            top: top + offsetTop,\n            width: width,\n            height: height,\n            right: left + offsetLeft + width + offsetRight,\n            bottom: top + offsetTop + height + offsetBottom,\n            translate: function (x, y) {\n                return makeArea(x + left + offsetLeft, y + top + offsetTop, width, height);\n            },\n            relativeFromTo: function (lhs, rhs) {\n                var newLeft = left + offsetLeft, newTop = top + offsetTop;\n                lhs = lhs.offsetParent;\n                rhs = rhs.offsetParent;\n                if (lhs === rhs) {\n                    return area;\n                }\n                for (; lhs; lhs = lhs.offsetParent) {\n                    newLeft += lhs.offsetLeft + lhs.clientLeft;\n                    newTop += lhs.offsetTop + lhs.clientTop;\n                }\n                for (; rhs; rhs = rhs.offsetParent) {\n                    newLeft -= rhs.offsetLeft + rhs.clientLeft;\n                    newTop -= rhs.offsetTop + rhs.clientTop;\n                }\n                return makeArea(newLeft, newTop, width, height);\n            },\n        };\n    }\n    var parent, area = makeArea(target.offsetLeft, target.offsetTop, target.offsetWidth, target.offsetHeight);\n    while ((parent = target.parentNode) instanceof HTMLElement &&\n        target !== config.boundary) {\n        var clientLeft = parent.offsetLeft + parent.clientLeft;\n        var clientTop = parent.offsetTop + parent.clientTop;\n        // Make area relative to parent's client area.\n        area = area\n            .relativeFromTo(target, parent)\n            .translate(-clientLeft, -clientTop);\n        var scrollLeft = withinBounds(parent.scrollLeft, area.right - parent.clientWidth, area.left, parent.clientWidth);\n        var scrollTop = withinBounds(parent.scrollTop, area.bottom - parent.clientHeight, area.top, parent.clientHeight);\n        // Pass the new coordinates to the handleScroll callback\n        config.handleScroll(parent, { scrollLeft: scrollLeft, scrollTop: scrollTop }, config);\n        // Determine actual scroll amount by reading back scroll properties.\n        area = area.translate(clientLeft - parent.scrollLeft, clientTop - parent.scrollTop);\n        target = parent;\n    }\n}\n","var __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nimport animate from 'amator';\nimport calculate from './calculate';\nvar handleScroll = function (parent, _a, config) {\n    var scrollLeft = _a.scrollLeft, scrollTop = _a.scrollTop;\n    if (config.duration) {\n        animate(parent, {\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n        }, { duration: config.duration, easing: config.easing });\n    }\n    else {\n        parent.scrollLeft = scrollLeft;\n        parent.scrollTop = scrollTop;\n    }\n};\nfunction isBoolean(options) {\n    return typeof options === 'boolean';\n}\nexport default function scrollIntoViewIfNeeded(target, options, animateOptions, finalElement, offsetOptions) {\n    if (offsetOptions === void 0) { offsetOptions = {}; }\n    if (!target || !(target instanceof HTMLElement))\n        throw new Error('Element is required in scrollIntoViewIfNeeded');\n    var config = { centerIfNeeded: false, handleScroll: handleScroll };\n    if (isBoolean(options)) {\n        config.centerIfNeeded = options;\n    }\n    else {\n        config = __assign({}, config, options);\n    }\n    var defaultOffset = { top: 0, right: 0, bottom: 0, left: 0 };\n    config.offset = config.offset\n        ? __assign({}, defaultOffset, config.offset) : defaultOffset;\n    if (animateOptions) {\n        config.duration = animateOptions.duration;\n        config.easing = animateOptions.easing;\n    }\n    if (finalElement) {\n        config.boundary = finalElement;\n    }\n    if (offsetOptions.offsetTop) {\n        config.offset.top = offsetOptions.offsetTop;\n    }\n    if (offsetOptions.offsetRight) {\n        config.offset.right = offsetOptions.offsetRight;\n    }\n    if (offsetOptions.offsetBottom) {\n        config.offset.bottom = offsetOptions.offsetBottom;\n    }\n    if (offsetOptions.offsetLeft) {\n        config.offset.left = offsetOptions.offsetLeft;\n    }\n    return calculate(target, config);\n}\n"],"sourceRoot":""}